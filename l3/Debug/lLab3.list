
lLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008704  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080088e4  080088e4  000188e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a78  08008a78  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a80  08008a80  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08008a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000068  08008af0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08008af0  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013715  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fa  00000000  00000000  000337f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00035ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9c  00000000  00000000  00037028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a41  00000000  00000000  00037cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143d3  00000000  00000000  0005e705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f075e  00000000  00000000  00072ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e84  00000000  00000000  00163238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001680bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080088cc 	.word	0x080088cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080088cc 	.word	0x080088cc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 ffac 	bl	800152e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f8bb 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fa11 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 f9cd 	bl	800097c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005e2:	f000 f941 	bl	8000868 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005e6:	f000 f8ff 	bl	80007e8 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005ea:	f000 f989 	bl	8000900 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t text[] = "Catch the Light!\r\nPress Button to Start\r\n\0";
 80005ee:	4b4d      	ldr	r3, [pc, #308]	; (8000724 <main+0x158>)
 80005f0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	c403      	stmia	r4!, {r0, r1}
 8000604:	8022      	strh	r2, [r4, #0]
 8000606:	3402      	adds	r4, #2
 8000608:	0c13      	lsrs	r3, r2, #16
 800060a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, text, 50, 10);
 800060c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000610:	230a      	movs	r3, #10
 8000612:	2232      	movs	r2, #50	; 0x32
 8000614:	4844      	ldr	r0, [pc, #272]	; (8000728 <main+0x15c>)
 8000616:	f005 fa1d 	bl	8005a54 <HAL_UART_Transmit>
  UARTConfig();
 800061a:	f000 fa81 	bl	8000b20 <UARTConfig>
  SPITxRx_Setup();
 800061e:	f000 fb15 	bl	8000c4c <SPITxRx_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(state){
 8000622:	4b42      	ldr	r3, [pc, #264]	; (800072c <main+0x160>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d034      	beq.n	8000694 <main+0xc8>
 800062a:	2b02      	cmp	r3, #2
 800062c:	dcf9      	bgt.n	8000622 <main+0x56>
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <main+0x6c>
 8000632:	2b01      	cmp	r3, #1
 8000634:	d01e      	beq.n	8000674 <main+0xa8>
 8000636:	e7f4      	b.n	8000622 <main+0x56>
	  case 0:
		  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063c:	483c      	ldr	r0, [pc, #240]	; (8000730 <main+0x164>)
 800063e:	f001 fddb 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d069      	beq.n	800071c <main+0x150>
			  ShowReadyLED();
 8000648:	f000 fb26 	bl	8000c98 <ShowReadyLED>
			  uint8_t starttext[] = "Game Started\r\n";
 800064c:	4b39      	ldr	r3, [pc, #228]	; (8000734 <main+0x168>)
 800064e:	f107 0414 	add.w	r4, r7, #20
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	c407      	stmia	r4!, {r0, r1, r2}
 8000656:	8023      	strh	r3, [r4, #0]
 8000658:	3402      	adds	r4, #2
 800065a:	0c1b      	lsrs	r3, r3, #16
 800065c:	7023      	strb	r3, [r4, #0]
			  HAL_UART_Transmit(&hlpuart1, starttext, 20, 10);
 800065e:	f107 0114 	add.w	r1, r7, #20
 8000662:	230a      	movs	r3, #10
 8000664:	2214      	movs	r2, #20
 8000666:	4830      	ldr	r0, [pc, #192]	; (8000728 <main+0x15c>)
 8000668:	f005 f9f4 	bl	8005a54 <HAL_UART_Transmit>
			  state = 1;
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <main+0x160>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
		  }
			  break;
 8000672:	e053      	b.n	800071c <main+0x150>
		  case 1:
			  TurnOffLED();
 8000674:	f000 fb3a 	bl	8000cec <TurnOffLED>
			  startTime = HAL_GetTick();
 8000678:	f000 ffbe 	bl	80015f8 <HAL_GetTick>
 800067c:	4603      	mov	r3, r0
 800067e:	4a2e      	ldr	r2, [pc, #184]	; (8000738 <main+0x16c>)
 8000680:	6013      	str	r3, [r2, #0]
			  score = 0;
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <main+0x170>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
			  LightRandomLED();
 8000688:	f000 fb5a 	bl	8000d40 <LightRandomLED>
			  state = 2;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <main+0x160>)
 800068e:	2202      	movs	r2, #2
 8000690:	701a      	strb	r2, [r3, #0]
			  break;
 8000692:	e046      	b.n	8000722 <main+0x156>
		  case 2:
			  if ((HAL_GetTick()-startTime) >= 90000){
 8000694:	f000 ffb0 	bl	80015f8 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <main+0x16c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	4a27      	ldr	r2, [pc, #156]	; (8000740 <main+0x174>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d926      	bls.n	80006f4 <main+0x128>
				  TurnOffLED();
 80006a6:	f000 fb21 	bl	8000cec <TurnOffLED>
				  WriteScore(score);
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <main+0x170>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fa94 	bl	8000bdc <WriteScore>
				  uint8_t endtext[] = "Game Finished\r\n";
 80006b4:	4b23      	ldr	r3, [pc, #140]	; (8000744 <main+0x178>)
 80006b6:	1d3c      	adds	r4, r7, #4
 80006b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				  HAL_UART_Transmit(&hlpuart1, endtext, 20, 10);
 80006be:	1d39      	adds	r1, r7, #4
 80006c0:	230a      	movs	r3, #10
 80006c2:	2214      	movs	r2, #20
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <main+0x15c>)
 80006c6:	f005 f9c5 	bl	8005a54 <HAL_UART_Transmit>
				  sprintf((char*)TxBuffer,"Score : %d\r\n",score);
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <main+0x170>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	491d      	ldr	r1, [pc, #116]	; (8000748 <main+0x17c>)
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <main+0x180>)
 80006d4:	f007 f826 	bl	8007724 <siprintf>
				  HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 80006d8:	481c      	ldr	r0, [pc, #112]	; (800074c <main+0x180>)
 80006da:	f7ff fda1 	bl	8000220 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	4919      	ldr	r1, [pc, #100]	; (800074c <main+0x180>)
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <main+0x15c>)
 80006e8:	f005 fa42 	bl	8005b70 <HAL_UART_Transmit_DMA>
				  state = 0;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <main+0x160>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
					  score++;
					  TurnOffLED();
					  LightRandomLED();
				  }
			  }
			  break;
 80006f2:	e015      	b.n	8000720 <main+0x154>
				  bool pressed = CheckButtonPress();
 80006f4:	f000 fb66 	bl	8000dc4 <CheckButtonPress>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				  if(pressed){
 80006fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000702:	2b00      	cmp	r3, #0
 8000704:	d00c      	beq.n	8000720 <main+0x154>
					  score++;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <main+0x170>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <main+0x170>)
 8000710:	701a      	strb	r2, [r3, #0]
					  TurnOffLED();
 8000712:	f000 faeb 	bl	8000cec <TurnOffLED>
					  LightRandomLED();
 8000716:	f000 fb13 	bl	8000d40 <LightRandomLED>
			  break;
 800071a:	e001      	b.n	8000720 <main+0x154>
			  break;
 800071c:	bf00      	nop
 800071e:	e780      	b.n	8000622 <main+0x56>
			  break;
 8000720:	bf00      	nop
	  switch(state){
 8000722:	e77e      	b.n	8000622 <main+0x56>
 8000724:	080088f4 	.word	0x080088f4
 8000728:	20000198 	.word	0x20000198
 800072c:	200003d2 	.word	0x200003d2
 8000730:	48000800 	.word	0x48000800
 8000734:	08008920 	.word	0x08008920
 8000738:	200003d4 	.word	0x200003d4
 800073c:	200003b6 	.word	0x200003b6
 8000740:	00015f8f 	.word	0x00015f8f
 8000744:	08008930 	.word	0x08008930
 8000748:	080088e4 	.word	0x080088e4
 800074c:	20000384 	.word	0x20000384

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	2238      	movs	r2, #56	; 0x38
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 f843 	bl	80077ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000772:	2000      	movs	r0, #0
 8000774:	f003 fbc6 	bl	8003f04 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800078e:	2304      	movs	r3, #4
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000792:	2355      	movs	r3, #85	; 0x55
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fc60 	bl	800406c <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007b2:	f000 fb43 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2104      	movs	r1, #4
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 ff5e 	bl	8004690 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007da:	f000 fb2f 	bl	8000e3c <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_I2C1_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_I2C1_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_I2C1_Init+0x74>)
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_I2C1_Init+0x7c>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_I2C1_Init+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <MX_I2C1_Init+0x74>)
 8000824:	f001 fd3b 	bl	800229e <HAL_I2C_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800082e:	f000 fb05 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_I2C1_Init+0x74>)
 8000836:	f003 facd 	bl	8003dd4 <HAL_I2CEx_ConfigAnalogFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 fafc 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_I2C1_Init+0x74>)
 8000848:	f003 fb0f 	bl	8003e6a <HAL_I2CEx_ConfigDigitalFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 faf3 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000084 	.word	0x20000084
 8000860:	40005400 	.word	0x40005400
 8000864:	30a0a7fb 	.word	0x30a0a7fb

08000868 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 800086e:	4a23      	ldr	r2, [pc, #140]	; (80008fc <MX_LPUART1_UART_Init+0x94>)
 8000870:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 8000874:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000878:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 800087c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000880:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 800088a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 80008b0:	f005 f880 	bl	80059b4 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80008ba:	f000 fabf 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008be:	2100      	movs	r1, #0
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 80008c2:	f006 fd64 	bl	800738e <HAL_UARTEx_SetTxFifoThreshold>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008cc:	f000 fab6 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 80008d4:	f006 fd99 	bl	800740a <HAL_UARTEx_SetRxFifoThreshold>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008de:	f000 faad 	bl	8000e3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_LPUART1_UART_Init+0x90>)
 80008e4:	f006 fd1a 	bl	800731c <HAL_UARTEx_DisableFifoMode>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008ee:	f000 faa5 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000198 	.word	0x20000198
 80008fc:	40008000 	.word	0x40008000

08000900 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_SPI3_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_SPI3_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_SPI3_Init+0x74>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_SPI3_Init+0x74>)
 800091a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800091e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI3_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_SPI3_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_SPI3_Init+0x74>)
 800092e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000932:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI3_Init+0x74>)
 8000936:	2238      	movs	r2, #56	; 0x38
 8000938:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_SPI3_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI3_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SPI3_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI3_Init+0x74>)
 800094e:	2207      	movs	r2, #7
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SPI3_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI3_Init+0x74>)
 800095a:	2208      	movs	r2, #8
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_SPI3_Init+0x74>)
 8000960:	f004 fb00 	bl	8004f64 <HAL_SPI_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fa67 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002ec 	.word	0x200002ec
 8000978:	40003c00 	.word	0x40003c00

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_DMA_Init+0x80>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <MX_DMA_Init+0x80>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6493      	str	r3, [r2, #72]	; 0x48
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_DMA_Init+0x80>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_DMA_Init+0x80>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_DMA_Init+0x80>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6493      	str	r3, [r2, #72]	; 0x48
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_DMA_Init+0x80>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200b      	movs	r0, #11
 80009b8:	f000 ff27 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009bc:	200b      	movs	r0, #11
 80009be:	f000 ff3e 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f000 ff1f 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009cc:	200c      	movs	r0, #12
 80009ce:	f000 ff36 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	200d      	movs	r0, #13
 80009d8:	f000 ff17 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009dc:	200d      	movs	r0, #13
 80009de:	f000 ff2e 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	200e      	movs	r0, #14
 80009e8:	f000 ff0f 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009ec:	200e      	movs	r0, #14
 80009ee:	f000 ff26 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a38      	ldr	r2, [pc, #224]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a34:	f043 0320 	orr.w	r3, r3, #32
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0320 	and.w	r3, r3, #32
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a32      	ldr	r2, [pc, #200]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a26      	ldr	r2, [pc, #152]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_GPIO_Init+0x114>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f001 fbc7 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	481e      	ldr	r0, [pc, #120]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000aa0:	f001 fbc2 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x11c>)
 8000abc:	f001 fa1a 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f001 fa0b 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4808      	ldr	r0, [pc, #32]	; (8000b18 <MX_GPIO_Init+0x118>)
 8000af6:	f001 f9fd 	bl	8001ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2028      	movs	r0, #40	; 0x28
 8000b00:	f000 fe83 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b04:	2028      	movs	r0, #40	; 0x28
 8000b06:	f000 fe9a 	bl	800183e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	48000800 	.word	0x48000800

08000b20 <UARTConfig>:

/* USER CODE BEGIN 4 */
void UARTConfig()
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 5);
 8000b24:	2205      	movs	r2, #5
 8000b26:	4903      	ldr	r1, [pc, #12]	; (8000b34 <UARTConfig+0x14>)
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <UARTConfig+0x18>)
 8000b2a:	f005 f8a1 	bl	8005c70 <HAL_UART_Receive_DMA>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000350 	.word	0x20000350
 8000b38:	20000198 	.word	0x20000198

08000b3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_UART_RxCpltCallback+0x84>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d134      	bne.n	8000bb6 <HAL_UART_RxCpltCallback+0x7a>
	{
		RxBuffer[5] = '\0';
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_UART_RxCpltCallback+0x88>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	715a      	strb	r2, [r3, #5]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <HAL_UART_RxCpltCallback+0x88>)
 8000b54:	491c      	ldr	r1, [pc, #112]	; (8000bc8 <HAL_UART_RxCpltCallback+0x8c>)
 8000b56:	481d      	ldr	r0, [pc, #116]	; (8000bcc <HAL_UART_RxCpltCallback+0x90>)
 8000b58:	f006 fde4 	bl	8007724 <siprintf>
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 8000b5c:	481b      	ldr	r0, [pc, #108]	; (8000bcc <HAL_UART_RxCpltCallback+0x90>)
 8000b5e:	f7ff fb5f 	bl	8000220 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	4918      	ldr	r1, [pc, #96]	; (8000bcc <HAL_UART_RxCpltCallback+0x90>)
 8000b6a:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <HAL_UART_RxCpltCallback+0x84>)
 8000b6c:	f005 f800 	bl	8005b70 <HAL_UART_Transmit_DMA>

		if (strstr((char*)RxBuffer, "score") != NULL){
 8000b70:	4917      	ldr	r1, [pc, #92]	; (8000bd0 <HAL_UART_RxCpltCallback+0x94>)
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <HAL_UART_RxCpltCallback+0x88>)
 8000b74:	f006 fe41 	bl	80077fa <strstr>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d016      	beq.n	8000bac <HAL_UART_RxCpltCallback+0x70>
			score = ReadScore();
 8000b7e:	f000 f849 	bl	8000c14 <ReadScore>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <HAL_UART_RxCpltCallback+0x98>)
 8000b88:	701a      	strb	r2, [r3, #0]
			sprintf((char*)TxBuffer,"Score : %d\r\n",score);
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_UART_RxCpltCallback+0x98>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4911      	ldr	r1, [pc, #68]	; (8000bd8 <HAL_UART_RxCpltCallback+0x9c>)
 8000b92:	480e      	ldr	r0, [pc, #56]	; (8000bcc <HAL_UART_RxCpltCallback+0x90>)
 8000b94:	f006 fdc6 	bl	8007724 <siprintf>
			HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_UART_RxCpltCallback+0x90>)
 8000b9a:	f7ff fb41 	bl	8000220 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4909      	ldr	r1, [pc, #36]	; (8000bcc <HAL_UART_RxCpltCallback+0x90>)
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_UART_RxCpltCallback+0x84>)
 8000ba8:	f004 ffe2 	bl	8005b70 <HAL_UART_Transmit_DMA>
		}

		HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 5);
 8000bac:	2205      	movs	r2, #5
 8000bae:	4905      	ldr	r1, [pc, #20]	; (8000bc4 <HAL_UART_RxCpltCallback+0x88>)
 8000bb0:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <HAL_UART_RxCpltCallback+0x84>)
 8000bb2:	f005 f85d 	bl	8005c70 <HAL_UART_Receive_DMA>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000198 	.word	0x20000198
 8000bc4:	20000350 	.word	0x20000350
 8000bc8:	08008940 	.word	0x08008940
 8000bcc:	20000384 	.word	0x20000384
 8000bd0:	08008950 	.word	0x08008950
 8000bd4:	200003b6 	.word	0x200003b6
 8000bd8:	080088e4 	.word	0x080088e4

08000bdc <WriteScore>:

void WriteScore(uint8_t scorevalue)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	if(hi2c1.State == HAL_I2C_STATE_READY){
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <WriteScore+0x34>)
 8000be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b20      	cmp	r3, #32
 8000bf0:	d109      	bne.n	8000c06 <WriteScore+0x2a>
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x00, I2C_MEMADD_SIZE_16BIT, &scorevalue, 1);
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	21a0      	movs	r1, #160	; 0xa0
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <WriteScore+0x34>)
 8000c02:	f001 fbe7 	bl	80023d4 <HAL_I2C_Mem_Write_IT>
	}
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000084 	.word	0x20000084

08000c14 <ReadScore>:

uint8_t ReadScore()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8
	if(hi2c1.State == HAL_I2C_STATE_READY){
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <ReadScore+0x30>)
 8000c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d109      	bne.n	8000c3a <ReadScore+0x26>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x00, I2C_MEMADD_SIZE_16BIT, eepromData, 1);
 8000c26:	2301      	movs	r3, #1
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <ReadScore+0x34>)
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2302      	movs	r3, #2
 8000c30:	2200      	movs	r2, #0
 8000c32:	21a0      	movs	r1, #160	; 0xa0
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <ReadScore+0x30>)
 8000c36:	f001 fc57 	bl	80024e8 <HAL_I2C_Mem_Read_IT>
	}
	return eepromData[0];
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <ReadScore+0x34>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000084 	.word	0x20000084
 8000c48:	200003b8 	.word	0x200003b8

08000c4c <SPITxRx_Setup>:

void SPITxRx_Setup()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000c50:	2200      	movs	r2, #0
 8000c52:	2104      	movs	r1, #4
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <SPITxRx_Setup+0x28>)
 8000c56:	f001 fae7 	bl	8002228 <HAL_GPIO_WritePin>
HAL_Delay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f000 fcd8 	bl	8001610 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000c60:	2201      	movs	r2, #1
 8000c62:	2104      	movs	r1, #4
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <SPITxRx_Setup+0x28>)
 8000c66:	f001 fadf 	bl	8002228 <HAL_GPIO_WritePin>
HAL_Delay(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fcd0 	bl	8001610 <HAL_Delay>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	48000c00 	.word	0x48000c00

08000c78 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS deSelect
 8000c80:	2201      	movs	r2, #1
 8000c82:	2104      	movs	r1, #4
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000c86:	f001 facf 	bl	8002228 <HAL_GPIO_WritePin>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	48000c00 	.word	0x48000c00

08000c98 <ShowReadyLED>:

void ShowReadyLED(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <ShowReadyLED+0x44>)
 8000ca0:	f001 faaa 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d016      	beq.n	8000cd8 <ShowReadyLED+0x40>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000caa:	2200      	movs	r2, #0
 8000cac:	2104      	movs	r1, #4
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <ShowReadyLED+0x44>)
 8000cb0:	f001 faba 	bl	8002228 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <ShowReadyLED+0x48>)
 8000cb6:	2240      	movs	r2, #64	; 0x40
 8000cb8:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x13;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <ShowReadyLED+0x48>)
 8000cbc:	2213      	movs	r2, #19
 8000cbe:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0x0F;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <ShowReadyLED+0x48>)
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <ShowReadyLED+0x48>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000ccc:	2304      	movs	r3, #4
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <ShowReadyLED+0x4c>)
 8000cd0:	4903      	ldr	r1, [pc, #12]	; (8000ce0 <ShowReadyLED+0x48>)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <ShowReadyLED+0x50>)
 8000cd4:	f004 f9f2 	bl	80050bc <HAL_SPI_TransmitReceive_IT>
	}
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	48000c00 	.word	0x48000c00
 8000ce0:	200003c8 	.word	0x200003c8
 8000ce4:	200003bc 	.word	0x200003bc
 8000ce8:	200002ec 	.word	0x200002ec

08000cec <TurnOffLED>:

void TurnOffLED(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <TurnOffLED+0x44>)
 8000cf4:	f001 fa80 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d016      	beq.n	8000d2c <TurnOffLED+0x40>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2104      	movs	r1, #4
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <TurnOffLED+0x44>)
 8000d04:	f001 fa90 	bl	8002228 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <TurnOffLED+0x48>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x13;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <TurnOffLED+0x48>)
 8000d10:	2213      	movs	r2, #19
 8000d12:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0x00;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <TurnOffLED+0x48>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <TurnOffLED+0x48>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000d20:	2304      	movs	r3, #4
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <TurnOffLED+0x4c>)
 8000d24:	4903      	ldr	r1, [pc, #12]	; (8000d34 <TurnOffLED+0x48>)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <TurnOffLED+0x50>)
 8000d28:	f004 f9c8 	bl	80050bc <HAL_SPI_TransmitReceive_IT>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	48000c00 	.word	0x48000c00
 8000d34:	200003c8 	.word	0x200003c8
 8000d38:	200003bc 	.word	0x200003bc
 8000d3c:	200002ec 	.word	0x200002ec

08000d40 <LightRandomLED>:

void LightRandomLED(){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
	uint8_t LEDIndex = rand()%4;
 8000d46:	f006 fbed 	bl	8007524 <rand>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	425a      	negs	r2, r3
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	f002 0203 	and.w	r2, r2, #3
 8000d56:	bf58      	it	pl
 8000d58:	4253      	negpl	r3, r2
 8000d5a:	71fb      	strb	r3, [r7, #7]
	LED = (1 << LEDIndex);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <LightRandomLED+0x70>)
 8000d68:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <LightRandomLED+0x74>)
 8000d6e:	f001 fa43 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d017      	beq.n	8000da8 <LightRandomLED+0x68>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2104      	movs	r1, #4
 8000d7c:	480d      	ldr	r0, [pc, #52]	; (8000db4 <LightRandomLED+0x74>)
 8000d7e:	f001 fa53 	bl	8002228 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000000;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <LightRandomLED+0x78>)
 8000d84:	2240      	movs	r2, #64	; 0x40
 8000d86:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x13;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <LightRandomLED+0x78>)
 8000d8a:	2213      	movs	r2, #19
 8000d8c:	705a      	strb	r2, [r3, #1]
	SPITx[2] = LED;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LightRandomLED+0x70>)
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <LightRandomLED+0x78>)
 8000d94:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <LightRandomLED+0x78>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <LightRandomLED+0x7c>)
 8000da0:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LightRandomLED+0x78>)
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <LightRandomLED+0x80>)
 8000da4:	f004 f98a 	bl	80050bc <HAL_SPI_TransmitReceive_IT>
	}
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200003d8 	.word	0x200003d8
 8000db4:	48000c00 	.word	0x48000c00
 8000db8:	200003c8 	.word	0x200003c8
 8000dbc:	200003bc 	.word	0x200003bc
 8000dc0:	200002ec 	.word	0x200002ec

08000dc4 <CheckButtonPress>:

bool CheckButtonPress(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
	uint8_t button;
	if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)){
 8000dca:	2104      	movs	r1, #4
 8000dcc:	4816      	ldr	r0, [pc, #88]	; (8000e28 <CheckButtonPress+0x64>)
 8000dce:	f001 fa13 	bl	80021f8 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d016      	beq.n	8000e06 <CheckButtonPress+0x42>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <CheckButtonPress+0x64>)
 8000dde:	f001 fa23 	bl	8002228 <HAL_GPIO_WritePin>
	SPITx[0] = 0b01000001;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <CheckButtonPress+0x68>)
 8000de4:	2241      	movs	r2, #65	; 0x41
 8000de6:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x12;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <CheckButtonPress+0x68>)
 8000dea:	2212      	movs	r2, #18
 8000dec:	705a      	strb	r2, [r3, #1]
	SPITx[2] = 0;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <CheckButtonPress+0x68>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	709a      	strb	r2, [r3, #2]
	SPITx[3] = 0;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <CheckButtonPress+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	70da      	strb	r2, [r3, #3]
	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <CheckButtonPress+0x6c>)
 8000dfe:	490b      	ldr	r1, [pc, #44]	; (8000e2c <CheckButtonPress+0x68>)
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <CheckButtonPress+0x70>)
 8000e02:	f004 f95b 	bl	80050bc <HAL_SPI_TransmitReceive_IT>
	}
	button = SPIRx[2];
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <CheckButtonPress+0x6c>)
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	71fb      	strb	r3, [r7, #7]
	return (button & LED)?true:false;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <CheckButtonPress+0x74>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4013      	ands	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	48000c00 	.word	0x48000c00
 8000e2c:	200003c8 	.word	0x200003c8
 8000e30:	200003bc 	.word	0x200003bc
 8000e34:	200002ec 	.word	0x200002ec
 8000e38:	200003d8 	.word	0x200003d8

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6613      	str	r3, [r2, #96]	; 0x60
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e7e:	f003 f8e5 	bl	800404c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09e      	sub	sp, #120	; 0x78
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2254      	movs	r2, #84	; 0x54
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f006 fc9a 	bl	80077ea <memset>
  if(hi2c->Instance==I2C1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a50      	ldr	r2, [pc, #320]	; (8000ffc <HAL_I2C_MspInit+0x16c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 8099 	bne.w	8000ff4 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fdfa 	bl	8004ac8 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000eda:	f7ff ffaf 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b48      	ldr	r3, [pc, #288]	; (8001000 <HAL_I2C_MspInit+0x170>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a47      	ldr	r2, [pc, #284]	; (8001000 <HAL_I2C_MspInit+0x170>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <HAL_I2C_MspInit+0x170>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000efa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f10:	4619      	mov	r1, r3
 8000f12:	483c      	ldr	r0, [pc, #240]	; (8001004 <HAL_I2C_MspInit+0x174>)
 8000f14:	f000 ffee 	bl	8001ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <HAL_I2C_MspInit+0x170>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	4a38      	ldr	r2, [pc, #224]	; (8001000 <HAL_I2C_MspInit+0x170>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f22:	6593      	str	r3, [r2, #88]	; 0x58
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_I2C_MspInit+0x170>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f32:	4a36      	ldr	r2, [pc, #216]	; (800100c <HAL_I2C_MspInit+0x17c>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000f36:	4b34      	ldr	r3, [pc, #208]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f66:	4828      	ldr	r0, [pc, #160]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f68:	f000 fc84 	bl	8001874 <HAL_DMA_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000f72:	f7ff ff63 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a23      	ldr	r2, [pc, #140]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f7c:	4a22      	ldr	r2, [pc, #136]	; (8001008 <HAL_I2C_MspInit+0x178>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_I2C_MspInit+0x184>)
 8000f86:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000f8a:	2211      	movs	r2, #17
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fb8:	4815      	ldr	r0, [pc, #84]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fba:	f000 fc5b 	bl	8001874 <HAL_DMA_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000fc4:	f7ff ff3a 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_I2C_MspInit+0x180>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	201f      	movs	r0, #31
 8000fda:	f000 fc16 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fde:	201f      	movs	r0, #31
 8000fe0:	f000 fc2d 	bl	800183e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f000 fc0e 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fee:	2020      	movs	r0, #32
 8000ff0:	f000 fc25 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3778      	adds	r7, #120	; 0x78
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400
 8001008:	200000d8 	.word	0x200000d8
 800100c:	40020030 	.word	0x40020030
 8001010:	20000138 	.word	0x20000138
 8001014:	40020044 	.word	0x40020044

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09e      	sub	sp, #120	; 0x78
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2254      	movs	r2, #84	; 0x54
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fbd6 	bl	80077ea <memset>
  if(huart->Instance==LPUART1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a4d      	ldr	r2, [pc, #308]	; (8001178 <HAL_UART_MspInit+0x160>)
 8001044:	4293      	cmp	r3, r2
 8001046:	f040 8092 	bne.w	800116e <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800104a:	2320      	movs	r3, #32
 800104c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f003 fd36 	bl	8004ac8 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001062:	f7ff feeb 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <HAL_UART_MspInit+0x164>)
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	4a44      	ldr	r2, [pc, #272]	; (800117c <HAL_UART_MspInit+0x164>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001072:	4b42      	ldr	r3, [pc, #264]	; (800117c <HAL_UART_MspInit+0x164>)
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b3f      	ldr	r3, [pc, #252]	; (800117c <HAL_UART_MspInit+0x164>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a3e      	ldr	r2, [pc, #248]	; (800117c <HAL_UART_MspInit+0x164>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <HAL_UART_MspInit+0x164>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001096:	230c      	movs	r3, #12
 8001098:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010a6:	230c      	movs	r3, #12
 80010a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f000 ff1e 	bl	8001ef4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010ba:	4a32      	ldr	r2, [pc, #200]	; (8001184 <HAL_UART_MspInit+0x16c>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010c0:	2222      	movs	r2, #34	; 0x22
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010d2:	2280      	movs	r2, #128	; 0x80
 80010d4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010e4:	2220      	movs	r2, #32
 80010e6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80010ee:	4824      	ldr	r0, [pc, #144]	; (8001180 <HAL_UART_MspInit+0x168>)
 80010f0:	f000 fbc0 	bl	8001874 <HAL_DMA_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80010fa:	f7ff fe9f 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <HAL_UART_MspInit+0x168>)
 8001102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <HAL_UART_MspInit+0x168>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_UART_MspInit+0x170>)
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <HAL_UART_MspInit+0x174>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001114:	2223      	movs	r2, #35	; 0x23
 8001116:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_UART_MspInit+0x170>)
 800111a:	2210      	movs	r2, #16
 800111c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_MspInit+0x170>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001130:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001138:	2200      	movs	r2, #0
 800113a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_UART_MspInit+0x170>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001144:	f000 fb96 	bl	8001874 <HAL_DMA_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800114e:	f7ff fe75 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <HAL_UART_MspInit+0x170>)
 8001156:	67da      	str	r2, [r3, #124]	; 0x7c
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_UART_MspInit+0x170>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	205b      	movs	r0, #91	; 0x5b
 8001164:	f000 fb51 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001168:	205b      	movs	r0, #91	; 0x5b
 800116a:	f000 fb68 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3778      	adds	r7, #120	; 0x78
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40008000 	.word	0x40008000
 800117c:	40021000 	.word	0x40021000
 8001180:	2000022c 	.word	0x2000022c
 8001184:	40020008 	.word	0x40020008
 8001188:	2000028c 	.word	0x2000028c
 800118c:	4002001c 	.word	0x4002001c

08001190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_SPI_MspInit+0x8c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d130      	bne.n	8001214 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_SPI_MspInit+0x90>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <HAL_SPI_MspInit+0x90>)
 80011b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_SPI_MspInit+0x90>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_SPI_MspInit+0x90>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_SPI_MspInit+0x90>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_SPI_MspInit+0x90>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f4:	2306      	movs	r3, #6
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <HAL_SPI_MspInit+0x94>)
 8001200:	f000 fe78 	bl	8001ef4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2033      	movs	r0, #51	; 0x33
 800120a:	f000 fafe 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800120e:	2033      	movs	r0, #51	; 0x33
 8001210:	f000 fb15 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40021000 	.word	0x40021000
 8001224:	48000800 	.word	0x48000800

08001228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800122c:	e7fe      	b.n	800122c <NMI_Handler+0x4>

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f9ae 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <DMA1_Channel1_IRQHandler+0x10>)
 8001282:	f000 fcda 	bl	8001c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000022c 	.word	0x2000022c

08001290 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Channel2_IRQHandler+0x10>)
 8001296:	f000 fcd0 	bl	8001c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000028c 	.word	0x2000028c

080012a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <DMA1_Channel3_IRQHandler+0x10>)
 80012aa:	f000 fcc6 	bl	8001c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000d8 	.word	0x200000d8

080012b8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <DMA1_Channel4_IRQHandler+0x10>)
 80012be:	f000 fcbc 	bl	8001c3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000138 	.word	0x20000138

080012cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <I2C1_EV_IRQHandler+0x10>)
 80012d2:	f001 f98f 	bl	80025f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000084 	.word	0x20000084

080012e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <I2C1_ER_IRQHandler+0x10>)
 80012e6:	f001 f99f 	bl	8002628 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000084 	.word	0x20000084

080012f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80012f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012fc:	f000 ffac 	bl	8002258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <SPI3_IRQHandler+0x10>)
 800130a:	f003 ff85 	bl	8005218 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002ec 	.word	0x200002ec

08001318 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <LPUART1_IRQHandler+0x10>)
 800131e:	f004 fcf3 	bl	8005d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000198 	.word	0x20000198

0800132c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return 1;
 8001330:	2301      	movs	r3, #1
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_kill>:

int _kill(int pid, int sig)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001346:	f006 fab5 	bl	80078b4 <__errno>
 800134a:	4603      	mov	r3, r0
 800134c:	2216      	movs	r2, #22
 800134e:	601a      	str	r2, [r3, #0]
  return -1;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_exit>:

void _exit (int status)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffe7 	bl	800133c <_kill>
  while (1) {}    /* Make sure we hang here */
 800136e:	e7fe      	b.n	800136e <_exit+0x12>

08001370 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00a      	b.n	8001398 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001382:	f3af 8000 	nop.w
 8001386:	4601      	mov	r1, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf0      	blt.n	8001382 <_read+0x12>
  }

  return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e009      	b.n	80013d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf1      	blt.n	80013bc <_write+0x12>
  }
  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140a:	605a      	str	r2, [r3, #4]
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f006 fa1a 	bl	80078b4 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20020000 	.word	0x20020000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	200003dc 	.word	0x200003dc
 80014b4:	20000530 	.word	0x20000530

080014b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014de:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <LoopForever+0x6>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	; (800151c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <LoopForever+0xe>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	; (8001528 <LoopForever+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f006 f9d9 	bl	80078c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800150e:	f7ff f85d 	bl	80005cc <main>

08001512 <LoopForever>:

LoopForever:
    b LoopForever
 8001512:	e7fe      	b.n	8001512 <LoopForever>
  ldr   r0, =_estack
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001520:	08008a88 	.word	0x08008a88
  ldr r2, =_sbss
 8001524:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001528:	20000530 	.word	0x20000530

0800152c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC1_2_IRQHandler>

0800152e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f95b 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f80e 	bl	8001560 <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	e001      	b.n	8001554 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001550:	f7ff fc7a 	bl	8000e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001554:	79fb      	ldrb	r3, [r7, #7]

}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <HAL_InitTick+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <HAL_InitTick+0x6c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <HAL_InitTick+0x68>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001580:	fbb1 f3f3 	udiv	r3, r1, r3
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f966 	bl	800185a <HAL_SYSTICK_Config>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10f      	bne.n	80015b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	d809      	bhi.n	80015ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159a:	2200      	movs	r2, #0
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	f04f 30ff 	mov.w	r0, #4294967295
 80015a2:	f000 f932 	bl	800180a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_InitTick+0x70>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e007      	b.n	80015be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e004      	b.n	80015be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e001      	b.n	80015be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_IncTick+0x1c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x20>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_IncTick+0x1c>)
 80015e4:	6013      	str	r3, [r2, #0]
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200003e0 	.word	0x200003e0
 80015f4:	20000008 	.word	0x20000008

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200003e0 	.word	0x200003e0

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff ffee 	bl	80015f8 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d004      	beq.n	8001634 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_Delay+0x40>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001634:	bf00      	nop
 8001636:	f7ff ffdf 	bl	80015f8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	429a      	cmp	r2, r3
 8001644:	d8f7      	bhi.n	8001636 <HAL_Delay+0x26>
  {
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000008 	.word	0x20000008

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff29 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff40 	bl	800169c <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff90 	bl	8001748 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5f 	bl	80016f4 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff33 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa4 	bl	80017b0 <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e08d      	b.n	80019a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_DMA_Init+0x138>)
 800188e:	429a      	cmp	r2, r3
 8001890:	d80f      	bhi.n	80018b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4b45      	ldr	r3, [pc, #276]	; (80019b0 <HAL_DMA_Init+0x13c>)
 800189a:	4413      	add	r3, r2
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_DMA_Init+0x140>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a42      	ldr	r2, [pc, #264]	; (80019b8 <HAL_DMA_Init+0x144>)
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
 80018b0:	e00e      	b.n	80018d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b40      	ldr	r3, [pc, #256]	; (80019bc <HAL_DMA_Init+0x148>)
 80018ba:	4413      	add	r3, r2
 80018bc:	4a3d      	ldr	r2, [pc, #244]	; (80019b4 <HAL_DMA_Init+0x140>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	009a      	lsls	r2, r3, #2
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a3c      	ldr	r2, [pc, #240]	; (80019c0 <HAL_DMA_Init+0x14c>)
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fa84 	bl	8001e30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001930:	d102      	bne.n	8001938 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800194c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d010      	beq.n	8001978 <HAL_DMA_Init+0x104>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b04      	cmp	r3, #4
 800195c:	d80c      	bhi.n	8001978 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 faa4 	bl	8001eac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	e008      	b.n	800198a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40020407 	.word	0x40020407
 80019b0:	bffdfff8 	.word	0xbffdfff8
 80019b4:	cccccccd 	.word	0xcccccccd
 80019b8:	40020000 	.word	0x40020000
 80019bc:	bffdfbf8 	.word	0xbffdfbf8
 80019c0:	40020400 	.word	0x40020400

080019c4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Start_IT+0x20>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e066      	b.n	8001ab2 <HAL_DMA_Start_IT+0xee>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d155      	bne.n	8001aa4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f9c9 	bl	8001db4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 020e 	orr.w	r2, r2, #14
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	e00f      	b.n	8001a5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0204 	bic.w	r2, r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 020a 	orr.w	r2, r2, #10
 8001a5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e005      	b.n	8001ab0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d005      	beq.n	8001ade <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	e037      	b.n	8001b4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 020e 	bic.w	r2, r2, #14
 8001aec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001afc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0201 	bic.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 021f 	and.w	r2, r3, #31
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d00d      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2204      	movs	r2, #4
 8001b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	e047      	b.n	8001c30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 020e 	bic.w	r2, r2, #14
 8001bae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
    }
  }
  return status;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d026      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x7a>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d021      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d107      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0204 	bic.w	r2, r2, #4
 8001c8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f003 021f 	and.w	r2, r3, #31
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d071      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001cb2:	e06c      	b.n	8001d8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d02e      	beq.n	8001d26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d029      	beq.n	8001d26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 020a 	bic.w	r2, r2, #10
 8001cee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2102      	movs	r1, #2
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d038      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d24:	e033      	b.n	8001d8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2208      	movs	r2, #8
 8001d30:	409a      	lsls	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02a      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d025      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 020e 	bic.w	r2, r2, #14
 8001d52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	2101      	movs	r1, #1
 8001d62:	fa01 f202 	lsl.w	r2, r1, r2
 8001d66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
}
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001da6:	b2db      	uxtb	r3, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ddc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f202 	lsl.w	r2, r1, r2
 8001df0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d108      	bne.n	8001e14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e12:	e007      	b.n	8001e24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d802      	bhi.n	8001e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e001      	b.n	8001e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e4c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3b08      	subs	r3, #8
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	009a      	lsls	r2, r3, #2
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40020407 	.word	0x40020407
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020820 	.word	0x40020820
 8001ea4:	cccccccd 	.word	0xcccccccd
 8001ea8:	40020880 	.word	0x40020880

08001eac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	1000823f 	.word	0x1000823f
 8001ef0:	40020940 	.word	0x40020940

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f02:	e15a      	b.n	80021ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	4013      	ands	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 814c 	beq.w	80021b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d005      	beq.n	8001f34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d130      	bne.n	8001f96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 0201 	and.w	r2, r3, #1
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d017      	beq.n	8001fd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d123      	bne.n	8002026 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	6939      	ldr	r1, [r7, #16]
 8002022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0203 	and.w	r2, r3, #3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80a6 	beq.w	80021b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002068:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HAL_GPIO_Init+0x2e4>)
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_GPIO_Init+0x2e4>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6613      	str	r3, [r2, #96]	; 0x60
 8002074:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_GPIO_Init+0x2e4>)
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002080:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_GPIO_Init+0x2e8>)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	3302      	adds	r3, #2
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020aa:	d01f      	beq.n	80020ec <HAL_GPIO_Init+0x1f8>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a4c      	ldr	r2, [pc, #304]	; (80021e0 <HAL_GPIO_Init+0x2ec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d019      	beq.n	80020e8 <HAL_GPIO_Init+0x1f4>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a4b      	ldr	r2, [pc, #300]	; (80021e4 <HAL_GPIO_Init+0x2f0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_GPIO_Init+0x1f0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_GPIO_Init+0x2f4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00d      	beq.n	80020e0 <HAL_GPIO_Init+0x1ec>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a49      	ldr	r2, [pc, #292]	; (80021ec <HAL_GPIO_Init+0x2f8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <HAL_GPIO_Init+0x1e8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a48      	ldr	r2, [pc, #288]	; (80021f0 <HAL_GPIO_Init+0x2fc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_GPIO_Init+0x1e4>
 80020d4:	2305      	movs	r3, #5
 80020d6:	e00a      	b.n	80020ee <HAL_GPIO_Init+0x1fa>
 80020d8:	2306      	movs	r3, #6
 80020da:	e008      	b.n	80020ee <HAL_GPIO_Init+0x1fa>
 80020dc:	2304      	movs	r3, #4
 80020de:	e006      	b.n	80020ee <HAL_GPIO_Init+0x1fa>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e004      	b.n	80020ee <HAL_GPIO_Init+0x1fa>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e002      	b.n	80020ee <HAL_GPIO_Init+0x1fa>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_GPIO_Init+0x1fa>
 80020ec:	2300      	movs	r3, #0
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	f002 0203 	and.w	r2, r2, #3
 80020f4:	0092      	lsls	r2, r2, #2
 80020f6:	4093      	lsls	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020fe:	4937      	ldr	r1, [pc, #220]	; (80021dc <HAL_GPIO_Init+0x2e8>)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_GPIO_Init+0x300>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002130:	4a30      	ldr	r2, [pc, #192]	; (80021f4 <HAL_GPIO_Init+0x300>)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_GPIO_Init+0x300>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800215a:	4a26      	ldr	r2, [pc, #152]	; (80021f4 <HAL_GPIO_Init+0x300>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002160:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_GPIO_Init+0x300>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43db      	mvns	r3, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_GPIO_Init+0x300>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_GPIO_Init+0x300>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ae:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_GPIO_Init+0x300>)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f47f ae9d 	bne.w	8001f04 <HAL_GPIO_Init+0x10>
  }
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010000 	.word	0x40010000
 80021e0:	48000400 	.word	0x48000400
 80021e4:	48000800 	.word	0x48000800
 80021e8:	48000c00 	.word	0x48000c00
 80021ec:	48001000 	.word	0x48001000
 80021f0:	48001400 	.word	0x48001400
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e001      	b.n	800221a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002244:	e002      	b.n	800224c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f806 	bl	8002288 <HAL_GPIO_EXTI_Callback>
  }
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e08d      	b.n	80023cc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fe fde3 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2224      	movs	r2, #36	; 0x24
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e006      	b.n	8002326 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002324:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d108      	bne.n	8002340 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	e007      	b.n	8002350 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800235e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002362:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002372:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69d9      	ldr	r1, [r3, #28]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d16a      	bne.n	80024d0 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_I2C_Mem_Write_IT+0x32>
 8002400:	8bbb      	ldrh	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e05f      	b.n	80024d2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002420:	d101      	bne.n	8002426 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002422:	2302      	movs	r3, #2
 8002424:	e055      	b.n	80024d2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_I2C_Mem_Write_IT+0x60>
 8002430:	2302      	movs	r3, #2
 8002432:	e04e      	b.n	80024d2 <HAL_I2C_Mem_Write_IT+0xfe>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2221      	movs	r2, #33	; 0x21
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8bba      	ldrh	r2, [r7, #28]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_I2C_Mem_Write_IT+0x108>)
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_I2C_Mem_Write_IT+0x10c>)
 800246e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002470:	897a      	ldrh	r2, [r7, #10]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d109      	bne.n	8002490 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800247c:	893b      	ldrh	r3, [r7, #8]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	651a      	str	r2, [r3, #80]	; 0x50
 800248e:	e00b      	b.n	80024a8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002490:	893b      	ldrh	r3, [r7, #8]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b29b      	uxth	r3, r3
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_I2C_Mem_Write_IT+0x110>)
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f001 fb78 	bl	8003bac <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024c4:	2101      	movs	r1, #1
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f001 fba2 	bl	8003c10 <I2C_Enable_IRQ>

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	ffff0000 	.word	0xffff0000
 80024e0:	080027b1 	.word	0x080027b1
 80024e4:	80002000 	.word	0x80002000

080024e8 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	d166      	bne.n	80025dc <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_I2C_Mem_Read_IT+0x32>
 8002514:	8bbb      	ldrh	r3, [r7, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e05b      	b.n	80025de <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002534:	d101      	bne.n	800253a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	e051      	b.n	80025de <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_Mem_Read_IT+0x60>
 8002544:	2302      	movs	r3, #2
 8002546:	e04a      	b.n	80025de <HAL_I2C_Mem_Read_IT+0xf6>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2222      	movs	r2, #34	; 0x22
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8bba      	ldrh	r2, [r7, #28]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_I2C_Mem_Read_IT+0x100>)
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_I2C_Mem_Read_IT+0x104>)
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800257e:	897a      	ldrh	r2, [r7, #10]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002584:	88fb      	ldrh	r3, [r7, #6]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d109      	bne.n	800259e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800258a:	893b      	ldrh	r3, [r7, #8]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f04f 32ff 	mov.w	r2, #4294967295
 800259a:	651a      	str	r2, [r3, #80]	; 0x50
 800259c:	e00b      	b.n	80025b6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800259e:	893b      	ldrh	r3, [r7, #8]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80025ac:	893b      	ldrh	r3, [r7, #8]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	8979      	ldrh	r1, [r7, #10]
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_I2C_Mem_Read_IT+0x108>)
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2300      	movs	r3, #0
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f001 faf2 	bl	8003bac <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80025d0:	2101      	movs	r1, #1
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f001 fb1c 	bl	8003c10 <I2C_Enable_IRQ>

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	ffff0000 	.word	0xffff0000
 80025ec:	080027b1 	.word	0x080027b1
 80025f0:	80002000 	.word	0x80002000

080025f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
  }
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00f      	beq.n	800266a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002668:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00f      	beq.n	8002694 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f043 0208 	orr.w	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002692:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00f      	beq.n	80026be <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f043 0202 	orr.w	r2, r3, #2
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 030b 	and.w	r3, r3, #11
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f001 f911 	bl	80038f8 <I2C_ITError>
  }
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
 800273a:	4613      	mov	r3, r2
 800273c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80027bc:	4b8d      	ldr	r3, [pc, #564]	; (80029f4 <I2C_Mem_ISR_IT+0x244>)
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <I2C_Mem_ISR_IT+0x22>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e10c      	b.n	80029ec <I2C_Mem_ISR_IT+0x23c>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d012      	beq.n	800280a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f043 0204 	orr.w	r2, r3, #4
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f001 f98f 	bl	8003b26 <I2C_Flush_TXDR>
 8002808:	e0dd      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01d      	beq.n	800285a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002858:	e0b5      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d02c      	beq.n	80028be <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800286a:	2b00      	cmp	r3, #0
 800286c:	d027      	beq.n	80028be <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d118      	bne.n	80028aa <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80028a8:	e08d      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ba:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80028bc:	e083      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d03c      	beq.n	8002942 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d037      	beq.n	8002942 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d02c      	beq.n	8002936 <I2C_Mem_ISR_IT+0x186>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d128      	bne.n	8002936 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	d910      	bls.n	8002910 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	; 0xff
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	b299      	uxth	r1, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f001 f94f 	bl	8003bac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800290e:	e017      	b.n	8002940 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	b299      	uxth	r1, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f001 f93c 	bl	8003bac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002934:	e004      	b.n	8002940 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002936:	2140      	movs	r1, #64	; 0x40
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 ffdd 	bl	80038f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800293e:	e042      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
 8002940:	e041      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d03c      	beq.n	80029c6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002952:	2b00      	cmp	r3, #0
 8002954:	d037      	beq.n	80029c6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002956:	2101      	movs	r1, #1
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f001 f9dd 	bl	8003d18 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800295e:	2102      	movs	r1, #2
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f001 f955 	bl	8003c10 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b22      	cmp	r3, #34	; 0x22
 8002970:	d101      	bne.n	8002976 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <I2C_Mem_ISR_IT+0x248>)
 8002974:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	2bff      	cmp	r3, #255	; 0xff
 800297e:	d910      	bls.n	80029a2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	b299      	uxth	r1, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f001 f906 	bl	8003bac <I2C_TransferConfig>
 80029a0:	e011      	b.n	80029c6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	b299      	uxth	r1, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f001 f8f3 	bl	8003bac <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80029da:	6939      	ldr	r1, [r7, #16]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fd0b 	bl	80033f8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	80002000 	.word	0x80002000
 80029f8:	80002400 	.word	0x80002400

080029fc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <I2C_Slave_ISR_IT+0x24>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0e2      	b.n	8002be6 <I2C_Slave_ISR_IT+0x1ea>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a3c:	6939      	ldr	r1, [r7, #16]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fda2 	bl	8003588 <I2C_ITSlaveCplt>
 8002a44:	e0ca      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d04b      	beq.n	8002ae8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d046      	beq.n	8002ae8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d128      	bne.n	8002ab6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b28      	cmp	r3, #40	; 0x28
 8002a6e:	d108      	bne.n	8002a82 <I2C_Slave_ISR_IT+0x86>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a76:	d104      	bne.n	8002a82 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a78:	6939      	ldr	r1, [r7, #16]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 fee8 	bl	8003850 <I2C_ITListenCplt>
 8002a80:	e031      	b.n	8002ae6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b29      	cmp	r3, #41	; 0x29
 8002a8c:	d10e      	bne.n	8002aac <I2C_Slave_ISR_IT+0xb0>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a94:	d00a      	beq.n	8002aac <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f001 f841 	bl	8003b26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fc4b 	bl	8003340 <I2C_ITSlaveSeqCplt>
 8002aaa:	e01c      	b.n	8002ae6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ab4:	e08f      	b.n	8002bd6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2210      	movs	r2, #16
 8002abc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <I2C_Slave_ISR_IT+0xdc>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad6:	d17e      	bne.n	8002bd6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	4619      	mov	r1, r3
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 ff0a 	bl	80038f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ae4:	e077      	b.n	8002bd6 <I2C_Slave_ISR_IT+0x1da>
 8002ae6:	e076      	b.n	8002bd6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02f      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02a      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d14b      	bne.n	8002bda <I2C_Slave_ISR_IT+0x1de>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b48:	d047      	beq.n	8002bda <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fbf8 	bl	8003340 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b50:	e043      	b.n	8002bda <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b66:	6939      	ldr	r1, [r7, #16]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fb28 	bl	80031be <I2C_ITAddrCplt>
 8002b6e:	e035      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d030      	beq.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02b      	beq.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d018      	beq.n	8002bc0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8002bbe:	e00d      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc6:	d002      	beq.n	8002bce <I2C_Slave_ISR_IT+0x1d2>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fbb6 	bl	8003340 <I2C_ITSlaveSeqCplt>
 8002bd4:	e002      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002bda:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b088      	sub	sp, #32
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <I2C_Master_ISR_DMA+0x1a>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0d9      	b.n	8002dbc <I2C_Master_ISR_DMA+0x1ce>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d011      	beq.n	8002c48 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002c38:	2120      	movs	r1, #32
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 ffe8 	bl	8003c10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 ff70 	bl	8003b26 <I2C_Flush_TXDR>
 8002c46:	e0b4      	b.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d071      	beq.n	8002d36 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d06c      	beq.n	8002d36 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c6a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d04e      	beq.n	8002d14 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c82:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2bff      	cmp	r3, #255	; 0xff
 8002c8c:	d906      	bls.n	8002c9c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	; 0xff
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002c94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e010      	b.n	8002cbe <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cae:	d003      	beq.n	8002cb8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e002      	b.n	8002cbe <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cbc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	8a79      	ldrh	r1, [r7, #18]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 ff6d 	bl	8003bac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b22      	cmp	r3, #34	; 0x22
 8002cee:	d108      	bne.n	8002d02 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d00:	e057      	b.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d12:	e04e      	b.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d22:	d003      	beq.n	8002d2c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 face 	bl	80032c6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002d2a:	e042      	b.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d2c:	2140      	movs	r1, #64	; 0x40
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fde2 	bl	80038f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002d34:	e03d      	b.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d028      	beq.n	8002d92 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d023      	beq.n	8002d92 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d119      	bne.n	8002d88 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d62:	d025      	beq.n	8002db0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d6c:	d108      	bne.n	8002d80 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002d7e:	e017      	b.n	8002db0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 faa0 	bl	80032c6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002d86:	e013      	b.n	8002db0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d88:	2140      	movs	r1, #64	; 0x40
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 fdb4 	bl	80038f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d90:	e00e      	b.n	8002db0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fb25 	bl	80033f8 <I2C_ITMasterCplt>
 8002dae:	e000      	b.n	8002db2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002db0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002dd0:	4b8d      	ldr	r3, [pc, #564]	; (8003008 <I2C_Mem_ISR_DMA+0x244>)
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <I2C_Mem_ISR_DMA+0x1e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e10e      	b.n	8003000 <I2C_Mem_ISR_DMA+0x23c>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d011      	beq.n	8002e22 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f043 0204 	orr.w	r2, r3, #4
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e12:	2120      	movs	r1, #32
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fefb 	bl	8003c10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fe83 	bl	8003b26 <I2C_Flush_TXDR>
 8002e20:	e0e9      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295
 8002e46:	651a      	str	r2, [r3, #80]	; 0x50
 8002e48:	e0d5      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d05f      	beq.n	8002f14 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d05a      	beq.n	8002f14 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e5e:	2101      	movs	r1, #1
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 ff59 	bl	8003d18 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002e66:	2110      	movs	r1, #16
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fed1 	bl	8003c10 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d048      	beq.n	8002f0a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2bff      	cmp	r3, #255	; 0xff
 8002e80:	d910      	bls.n	8002ea4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	22ff      	movs	r2, #255	; 0xff
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fe85 	bl	8003bac <I2C_TransferConfig>
 8002ea2:	e011      	b.n	8002ec8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	b299      	uxth	r1, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fe72 	bl	8003bac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b22      	cmp	r3, #34	; 0x22
 8002ee4:	d108      	bne.n	8002ef8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ef6:	e07e      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f06:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f08:	e075      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f0a:	2140      	movs	r1, #64	; 0x40
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fcf3 	bl	80038f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002f12:	e070      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d05d      	beq.n	8002fda <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d058      	beq.n	8002fda <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fef4 	bl	8003d18 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f30:	2110      	movs	r1, #16
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fe6c 	bl	8003c10 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b22      	cmp	r3, #34	; 0x22
 8002f42:	d101      	bne.n	8002f48 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002f44:	4b31      	ldr	r3, [pc, #196]	; (800300c <I2C_Mem_ISR_DMA+0x248>)
 8002f46:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2bff      	cmp	r3, #255	; 0xff
 8002f50:	d910      	bls.n	8002f74 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	22ff      	movs	r2, #255	; 0xff
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	b299      	uxth	r1, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fe1d 	bl	8003bac <I2C_TransferConfig>
 8002f72:	e011      	b.n	8002f98 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	b299      	uxth	r1, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fe0a 	bl	8003bac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b22      	cmp	r3, #34	; 0x22
 8002fb4:	d108      	bne.n	8002fc8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fc6:	e016      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fd8:	e00d      	b.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fa01 	bl	80033f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	80002000 	.word	0x80002000
 800300c:	80002400 	.word	0x80002400

08003010 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <I2C_Slave_ISR_DMA+0x24>
 8003030:	2302      	movs	r3, #2
 8003032:	e0c0      	b.n	80031b6 <I2C_Slave_ISR_DMA+0x1a6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa98 	bl	8003588 <I2C_ITSlaveCplt>
 8003058:	e0a8      	b.n	80031ac <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8095 	beq.w	8003190 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 808f 	beq.w	8003190 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d07d      	beq.n	8003182 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00c      	beq.n	80030a8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80030a4:	2301      	movs	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d128      	bne.n	8003122 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b28      	cmp	r3, #40	; 0x28
 80030da:	d108      	bne.n	80030ee <I2C_Slave_ISR_DMA+0xde>
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030e2:	d104      	bne.n	80030ee <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fbb2 	bl	8003850 <I2C_ITListenCplt>
 80030ec:	e048      	b.n	8003180 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b29      	cmp	r3, #41	; 0x29
 80030f8:	d10e      	bne.n	8003118 <I2C_Slave_ISR_DMA+0x108>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003100:	d00a      	beq.n	8003118 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2210      	movs	r2, #16
 8003108:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fd0b 	bl	8003b26 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f915 	bl	8003340 <I2C_ITSlaveSeqCplt>
 8003116:	e033      	b.n	8003180 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2210      	movs	r2, #16
 800311e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003120:	e034      	b.n	800318c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2210      	movs	r2, #16
 8003128:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <I2C_Slave_ISR_DMA+0x13c>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800314a:	d11f      	bne.n	800318c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b21      	cmp	r3, #33	; 0x21
 8003150:	d002      	beq.n	8003158 <I2C_Slave_ISR_DMA+0x148>
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b29      	cmp	r3, #41	; 0x29
 8003156:	d103      	bne.n	8003160 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	; 0x21
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
 800315e:	e008      	b.n	8003172 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b22      	cmp	r3, #34	; 0x22
 8003164:	d002      	beq.n	800316c <I2C_Slave_ISR_DMA+0x15c>
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b2a      	cmp	r3, #42	; 0x2a
 800316a:	d102      	bne.n	8003172 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2222      	movs	r2, #34	; 0x22
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4619      	mov	r1, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fbbd 	bl	80038f8 <I2C_ITError>
      if (treatdmanack == 1U)
 800317e:	e005      	b.n	800318c <I2C_Slave_ISR_DMA+0x17c>
 8003180:	e004      	b.n	800318c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2210      	movs	r2, #16
 8003188:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800318a:	e00f      	b.n	80031ac <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800318c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800318e:	e00d      	b.n	80031ac <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f809 	bl	80031be <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031d4:	2b28      	cmp	r3, #40	; 0x28
 80031d6:	d16a      	bne.n	80032ae <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	0c1b      	lsrs	r3, r3, #16
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80031f6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003204:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003212:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d138      	bne.n	800328e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800321c:	897b      	ldrh	r3, [r7, #10]
 800321e:	09db      	lsrs	r3, r3, #7
 8003220:	b29a      	uxth	r2, r3
 8003222:	89bb      	ldrh	r3, [r7, #12]
 8003224:	4053      	eors	r3, r2
 8003226:	b29b      	uxth	r3, r3
 8003228:	f003 0306 	and.w	r3, r3, #6
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11c      	bne.n	800326a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003230:	897b      	ldrh	r3, [r7, #10]
 8003232:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003242:	2b02      	cmp	r3, #2
 8003244:	d13b      	bne.n	80032be <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2208      	movs	r2, #8
 8003252:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800325c:	89ba      	ldrh	r2, [r7, #12]
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fa63 	bl	800272e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003268:	e029      	b.n	80032be <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800326a:	893b      	ldrh	r3, [r7, #8]
 800326c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800326e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fd50 	bl	8003d18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003280:	89ba      	ldrh	r2, [r7, #12]
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	4619      	mov	r1, r3
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fa51 	bl	800272e <HAL_I2C_AddrCallback>
}
 800328c:	e017      	b.n	80032be <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800328e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fd40 	bl	8003d18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032a0:	89ba      	ldrh	r2, [r7, #12]
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fa41 	bl	800272e <HAL_I2C_AddrCallback>
}
 80032ac:	e007      	b.n	80032be <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2208      	movs	r2, #8
 80032b4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b21      	cmp	r3, #33	; 0x21
 80032e0:	d115      	bne.n	800330e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2211      	movs	r2, #17
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032f6:	2101      	movs	r1, #1
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fd0d 	bl	8003d18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff f9e9 	bl	80026de <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800330c:	e014      	b.n	8003338 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2212      	movs	r2, #18
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003322:	2102      	movs	r1, #2
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fcf7 	bl	8003d18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff f9dd 	bl	80026f2 <HAL_I2C_MasterRxCpltCallback>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e00c      	b.n	800338e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b29      	cmp	r3, #41	; 0x29
 8003398:	d112      	bne.n	80033c0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2228      	movs	r2, #40	; 0x28
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2221      	movs	r2, #33	; 0x21
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033a8:	2101      	movs	r1, #1
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fcb4 	bl	8003d18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff f9a4 	bl	8002706 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033be:	e017      	b.n	80033f0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b2a      	cmp	r3, #42	; 0x2a
 80033ca:	d111      	bne.n	80033f0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2228      	movs	r2, #40	; 0x28
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2222      	movs	r2, #34	; 0x22
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033da:	2102      	movs	r1, #2
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fc9b 	bl	8003d18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff f995 	bl	800271a <HAL_I2C_SlaveRxCpltCallback>
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2220      	movs	r2, #32
 800340c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b21      	cmp	r3, #33	; 0x21
 8003418:	d107      	bne.n	800342a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800341a:	2101      	movs	r1, #1
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fc7b 	bl	8003d18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2211      	movs	r2, #17
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
 8003428:	e00c      	b.n	8003444 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b22      	cmp	r3, #34	; 0x22
 8003434:	d106      	bne.n	8003444 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003436:	2102      	movs	r1, #2
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fc6d 	bl	8003d18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2212      	movs	r2, #18
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <I2C_ITMasterCplt+0x188>)
 8003450:	400b      	ands	r3, r1
 8003452:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a49      	ldr	r2, [pc, #292]	; (8003584 <I2C_ITMasterCplt+0x18c>)
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2210      	movs	r2, #16
 8003470:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f043 0204 	orr.w	r2, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b60      	cmp	r3, #96	; 0x60
 8003488:	d10a      	bne.n	80034a0 <I2C_ITMasterCplt+0xa8>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	b2db      	uxtb	r3, r3
 800349c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800349e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fb40 	bl	8003b26 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b60      	cmp	r3, #96	; 0x60
 80034b6:	d002      	beq.n	80034be <I2C_ITMasterCplt+0xc6>
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fa17 	bl	80038f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80034ca:	e054      	b.n	8003576 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b21      	cmp	r3, #33	; 0x21
 80034d6:	d124      	bne.n	8003522 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d10b      	bne.n	800350a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff f92b 	bl	800275e <HAL_I2C_MemTxCpltCallback>
}
 8003508:	e035      	b.n	8003576 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff f8df 	bl	80026de <HAL_I2C_MasterTxCpltCallback>
}
 8003520:	e029      	b.n	8003576 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b22      	cmp	r3, #34	; 0x22
 800352c:	d123      	bne.n	8003576 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d10b      	bne.n	8003560 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff f90a 	bl	8002772 <HAL_I2C_MemRxCpltCallback>
}
 800355e:	e00a      	b.n	8003576 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff f8be 	bl	80026f2 <HAL_I2C_MasterRxCpltCallback>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	fe00e800 	.word	0xfe00e800
 8003584:	ffff0000 	.word	0xffff0000

08003588 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035aa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2220      	movs	r2, #32
 80035b2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035b4:	7afb      	ldrb	r3, [r7, #11]
 80035b6:	2b21      	cmp	r3, #33	; 0x21
 80035b8:	d002      	beq.n	80035c0 <I2C_ITSlaveCplt+0x38>
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	2b29      	cmp	r3, #41	; 0x29
 80035be:	d108      	bne.n	80035d2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80035c0:	f248 0101 	movw	r1, #32769	; 0x8001
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fba7 	bl	8003d18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2221      	movs	r2, #33	; 0x21
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
 80035d0:	e019      	b.n	8003606 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	2b22      	cmp	r3, #34	; 0x22
 80035d6:	d002      	beq.n	80035de <I2C_ITSlaveCplt+0x56>
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	2b2a      	cmp	r3, #42	; 0x2a
 80035dc:	d108      	bne.n	80035f0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035de:	f248 0102 	movw	r1, #32770	; 0x8002
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fb98 	bl	8003d18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2222      	movs	r2, #34	; 0x22
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
 80035ee:	e00a      	b.n	8003606 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	2b28      	cmp	r3, #40	; 0x28
 80035f4:	d107      	bne.n	8003606 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80035f6:	f248 0103 	movw	r1, #32771	; 0x8003
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fb8c 	bl	8003d18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003614:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b89      	ldr	r3, [pc, #548]	; (8003848 <I2C_ITSlaveCplt+0x2c0>)
 8003622:	400b      	ands	r3, r1
 8003624:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa7d 	bl	8003b26 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d013      	beq.n	800365e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003644:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01f      	beq.n	800368e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800365c:	e017      	b.n	800368e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003676:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d006      	beq.n	800368e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0304 	bic.w	r3, r3, #4
 800369e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d049      	beq.n	800378e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003700:	2b00      	cmp	r3, #0
 8003702:	d044      	beq.n	800378e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d128      	bne.n	8003760 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b28      	cmp	r3, #40	; 0x28
 8003718:	d108      	bne.n	800372c <I2C_ITSlaveCplt+0x1a4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003720:	d104      	bne.n	800372c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f893 	bl	8003850 <I2C_ITListenCplt>
 800372a:	e030      	b.n	800378e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b29      	cmp	r3, #41	; 0x29
 8003736:	d10e      	bne.n	8003756 <I2C_ITSlaveCplt+0x1ce>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800373e:	d00a      	beq.n	8003756 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f9ec 	bl	8003b26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fdf6 	bl	8003340 <I2C_ITSlaveSeqCplt>
 8003754:	e01b      	b.n	800378e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2210      	movs	r2, #16
 800375c:	61da      	str	r2, [r3, #28]
 800375e:	e016      	b.n	800378e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2210      	movs	r2, #16
 8003766:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <I2C_ITSlaveCplt+0x1fa>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d105      	bne.n	800378e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8b5 	bl	80038f8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8a4 	bl	80038f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b28      	cmp	r3, #40	; 0x28
 80037ba:	d141      	bne.n	8003840 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f846 	bl	8003850 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037c4:	e03c      	b.n	8003840 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ce:	d014      	beq.n	80037fa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff fdb5 	bl	8003340 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <I2C_ITSlaveCplt+0x2c4>)
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe ffa9 	bl	800274a <HAL_I2C_ListenCpltCallback>
}
 80037f8:	e022      	b.n	8003840 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b22      	cmp	r3, #34	; 0x22
 8003804:	d10e      	bne.n	8003824 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fe ff7c 	bl	800271a <HAL_I2C_SlaveRxCpltCallback>
}
 8003822:	e00d      	b.n	8003840 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe ff63 	bl	8002706 <HAL_I2C_SlaveTxCpltCallback>
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fe00e800 	.word	0xfe00e800
 800384c:	ffff0000 	.word	0xffff0000

08003850 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a25      	ldr	r2, [pc, #148]	; (80038f4 <I2C_ITListenCplt+0xa4>)
 800385e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d022      	beq.n	80038cc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80038cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa21 	bl	8003d18 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2210      	movs	r2, #16
 80038dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe ff2f 	bl	800274a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	ffff0000 	.word	0xffff0000

080038f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003908:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a6d      	ldr	r2, [pc, #436]	; (8003acc <I2C_ITError+0x1d4>)
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b28      	cmp	r3, #40	; 0x28
 800392e:	d005      	beq.n	800393c <I2C_ITError+0x44>
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b29      	cmp	r3, #41	; 0x29
 8003934:	d002      	beq.n	800393c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b2a      	cmp	r3, #42	; 0x2a
 800393a:	d10b      	bne.n	8003954 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800393c:	2103      	movs	r1, #3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9ea 	bl	8003d18 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2228      	movs	r2, #40	; 0x28
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a60      	ldr	r2, [pc, #384]	; (8003ad0 <I2C_ITError+0x1d8>)
 8003950:	635a      	str	r2, [r3, #52]	; 0x34
 8003952:	e030      	b.n	80039b6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003954:	f248 0103 	movw	r1, #32771	; 0x8003
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f9dd 	bl	8003d18 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8e1 	bl	8003b26 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b60      	cmp	r3, #96	; 0x60
 800396e:	d01f      	beq.n	80039b0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d114      	bne.n	80039b0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d109      	bne.n	80039a8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2220      	movs	r2, #32
 80039ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d039      	beq.n	8003a38 <I2C_ITError+0x140>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b11      	cmp	r3, #17
 80039c8:	d002      	beq.n	80039d0 <I2C_ITError+0xd8>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b21      	cmp	r3, #33	; 0x21
 80039ce:	d133      	bne.n	8003a38 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039de:	d107      	bne.n	80039f0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe f9cf 	bl	8001d98 <HAL_DMA_GetState>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d017      	beq.n	8003a30 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	4a33      	ldr	r2, [pc, #204]	; (8003ad4 <I2C_ITError+0x1dc>)
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe f8a9 	bl	8001b6c <HAL_DMA_Abort_IT>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d04d      	beq.n	8003abc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a2e:	e045      	b.n	8003abc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f851 	bl	8003ad8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a36:	e041      	b.n	8003abc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d039      	beq.n	8003ab4 <I2C_ITError+0x1bc>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b12      	cmp	r3, #18
 8003a44:	d002      	beq.n	8003a4c <I2C_ITError+0x154>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b22      	cmp	r3, #34	; 0x22
 8003a4a:	d133      	bne.n	8003ab4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5a:	d107      	bne.n	8003a6c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe f991 	bl	8001d98 <HAL_DMA_GetState>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d017      	beq.n	8003aac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <I2C_ITError+0x1dc>)
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe f86b 	bl	8001b6c <HAL_DMA_Abort_IT>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d011      	beq.n	8003ac0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aaa:	e009      	b.n	8003ac0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f813 	bl	8003ad8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab2:	e005      	b.n	8003ac0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f80f 	bl	8003ad8 <I2C_TreatErrorCallback>
  }
}
 8003aba:	e002      	b.n	8003ac2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac0:	bf00      	nop
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	080029fd 	.word	0x080029fd
 8003ad4:	08003b6f 	.word	0x08003b6f

08003ad8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d10e      	bne.n	8003b0a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fe fe49 	bl	800279a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b08:	e009      	b.n	8003b1e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fe fe34 	bl	8002786 <HAL_I2C_ErrorCallback>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d103      	bne.n	8003b44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d007      	beq.n	8003b62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	619a      	str	r2, [r3, #24]
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	2200      	movs	r2, #0
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	2200      	movs	r2, #0
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff ff9b 	bl	8003ad8 <I2C_TreatErrorCallback>
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	817b      	strh	r3, [r7, #10]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bbe:	897b      	ldrh	r3, [r7, #10]
 8003bc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bc4:	7a7b      	ldrb	r3, [r7, #9]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	0d5b      	lsrs	r3, r3, #21
 8003be6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <I2C_TransferConfig+0x60>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	ea02 0103 	and.w	r1, r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	03ff63ff 	.word	0x03ff63ff

08003c10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	4a39      	ldr	r2, [pc, #228]	; (8003d0c <I2C_Enable_IRQ+0xfc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d032      	beq.n	8003c90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003c2e:	4a38      	ldr	r2, [pc, #224]	; (8003d10 <I2C_Enable_IRQ+0x100>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02d      	beq.n	8003c90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003c38:	4a36      	ldr	r2, [pc, #216]	; (8003d14 <I2C_Enable_IRQ+0x104>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d028      	beq.n	8003c90 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	da03      	bge.n	8003c4e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c4c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003c5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003c70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c72:	887b      	ldrh	r3, [r7, #2]
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d103      	bne.n	8003c80 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d133      	bne.n	8003cee <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f043 0320 	orr.w	r3, r3, #32
 8003c8c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c8e:	e02e      	b.n	8003cee <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	da03      	bge.n	8003ca0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c9e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ca0:	887b      	ldrh	r3, [r7, #2]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003cb0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003cc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d103      	bne.n	8003cd2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d103      	bne.n	8003ce0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d103      	bne.n	8003cee <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	08002bef 	.word	0x08002bef
 8003d10:	08003011 	.word	0x08003011
 8003d14:	08002dc5 	.word	0x08002dc5

08003d18 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d28:	887b      	ldrh	r3, [r7, #2]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00f      	beq.n	8003d52 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d38:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d46:	2b28      	cmp	r3, #40	; 0x28
 8003d48:	d003      	beq.n	8003d52 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d52:	887b      	ldrh	r3, [r7, #2]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00f      	beq.n	8003d7c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d62:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d70:	2b28      	cmp	r3, #40	; 0x28
 8003d72:	d003      	beq.n	8003d7c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d7a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	da03      	bge.n	8003d8c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d103      	bne.n	8003d9a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d9a:	887b      	ldrh	r3, [r7, #2]
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d103      	bne.n	8003da8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f043 0320 	orr.w	r3, r3, #32
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003da8:	887b      	ldrh	r3, [r7, #2]
 8003daa:	2b40      	cmp	r3, #64	; 0x40
 8003dac:	d103      	bne.n	8003db6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	400a      	ands	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d138      	bne.n	8003e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e032      	b.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d139      	bne.n	8003ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e033      	b.n	8003ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2224      	movs	r2, #36	; 0x24
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ebc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d141      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f12:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f1e:	d131      	bne.n	8003f84 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f20:	4b47      	ldr	r3, [pc, #284]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f26:	4a46      	ldr	r2, [pc, #280]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f30:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f38:	4a41      	ldr	r2, [pc, #260]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f40:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2232      	movs	r2, #50	; 0x32
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	4a3f      	ldr	r2, [pc, #252]	; (8004048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	0c9b      	lsrs	r3, r3, #18
 8003f52:	3301      	adds	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f56:	e002      	b.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5e:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d102      	bne.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f2      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f72:	4b33      	ldr	r3, [pc, #204]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d158      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e057      	b.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f94:	e04d      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d141      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d131      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb2:	4a23      	ldr	r2, [pc, #140]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fbc:	4b20      	ldr	r3, [pc, #128]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fcc:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2232      	movs	r2, #50	; 0x32
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe2:	e002      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	d102      	bne.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f2      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d112      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e011      	b.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004020:	e007      	b.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004030:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40007000 	.word	0x40007000
 8004044:	20000000 	.word	0x20000000
 8004048:	431bde83 	.word	0x431bde83

0800404c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a04      	ldr	r2, [pc, #16]	; (8004068 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405a:	6093      	str	r3, [r2, #8]
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40007000 	.word	0x40007000

0800406c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e2fe      	b.n	800467c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d075      	beq.n	8004176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408a:	4b97      	ldr	r3, [pc, #604]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004094:	4b94      	ldr	r3, [pc, #592]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d102      	bne.n	80040aa <HAL_RCC_OscConfig+0x3e>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_OscConfig+0x44>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	4b8d      	ldr	r3, [pc, #564]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05b      	beq.n	8004174 <HAL_RCC_OscConfig+0x108>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d157      	bne.n	8004174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e2d9      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d0:	d106      	bne.n	80040e0 <HAL_RCC_OscConfig+0x74>
 80040d2:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a84      	ldr	r2, [pc, #528]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x98>
 80040ea:	4b7f      	ldr	r3, [pc, #508]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7e      	ldr	r2, [pc, #504]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b7c      	ldr	r3, [pc, #496]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a7b      	ldr	r2, [pc, #492]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xb0>
 8004104:	4b78      	ldr	r3, [pc, #480]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800410a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b75      	ldr	r3, [pc, #468]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd fa68 	bl	80015f8 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7fd fa64 	bl	80015f8 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e29e      	b.n	800467c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413e:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xc0>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd fa54 	bl	80015f8 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004154:	f7fd fa50 	bl	80015f8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	; 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e28a      	b.n	800467c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004166:	4b60      	ldr	r3, [pc, #384]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0xe8>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d075      	beq.n	800426e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b56      	ldr	r3, [pc, #344]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_OscConfig+0x136>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d002      	beq.n	80041a8 <HAL_RCC_OscConfig+0x13c>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d11f      	bne.n	80041e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_OscConfig+0x154>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e25d      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4b49      	ldr	r3, [pc, #292]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	4946      	ldr	r1, [pc, #280]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041d4:	4b45      	ldr	r3, [pc, #276]	; (80042ec <HAL_RCC_OscConfig+0x280>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd f9c1 	bl	8001560 <HAL_InitTick>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d043      	beq.n	800426c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e249      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d023      	beq.n	8004238 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a3c      	ldr	r2, [pc, #240]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80041f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd f9fc 	bl	80015f8 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004204:	f7fd f9f8 	bl	80015f8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e232      	b.n	800467c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004216:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	492d      	ldr	r1, [pc, #180]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
 8004236:	e01a      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004238:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2a      	ldr	r2, [pc, #168]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800423e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd f9d8 	bl	80015f8 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800424c:	f7fd f9d4 	bl	80015f8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e20e      	b.n	800467c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x1e0>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d041      	beq.n	80042fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01c      	beq.n	80042bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 8004284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004288:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004292:	f7fd f9b1 	bl	80015f8 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800429a:	f7fd f9ad 	bl	80015f8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1e7      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ef      	beq.n	800429a <HAL_RCC_OscConfig+0x22e>
 80042ba:	e020      	b.n	80042fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <HAL_RCC_OscConfig+0x27c>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd f994 	bl	80015f8 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d2:	e00d      	b.n	80042f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd f990 	bl	80015f8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d906      	bls.n	80042f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1ca      	b.n	800467c <HAL_RCC_OscConfig+0x610>
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f0:	4b8c      	ldr	r3, [pc, #560]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ea      	bne.n	80042d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 80a6 	beq.w	8004458 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430c:	2300      	movs	r3, #0
 800430e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004310:	4b84      	ldr	r3, [pc, #528]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x2b4>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x2b6>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432a:	4a7e      	ldr	r2, [pc, #504]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	6593      	str	r3, [r2, #88]	; 0x58
 8004332:	4b7c      	ldr	r3, [pc, #496]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800433e:	2301      	movs	r3, #1
 8004340:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004342:	4b79      	ldr	r3, [pc, #484]	; (8004528 <HAL_RCC_OscConfig+0x4bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434a:	2b00      	cmp	r3, #0
 800434c:	d118      	bne.n	8004380 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434e:	4b76      	ldr	r3, [pc, #472]	; (8004528 <HAL_RCC_OscConfig+0x4bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a75      	ldr	r2, [pc, #468]	; (8004528 <HAL_RCC_OscConfig+0x4bc>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435a:	f7fd f94d 	bl	80015f8 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fd f949 	bl	80015f8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e183      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004374:	4b6c      	ldr	r3, [pc, #432]	; (8004528 <HAL_RCC_OscConfig+0x4bc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_RCC_OscConfig+0x32e>
 8004388:	4b66      	ldr	r3, [pc, #408]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a65      	ldr	r2, [pc, #404]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004398:	e024      	b.n	80043e4 <HAL_RCC_OscConfig+0x378>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d110      	bne.n	80043c4 <HAL_RCC_OscConfig+0x358>
 80043a2:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	4a5e      	ldr	r2, [pc, #376]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f043 0304 	orr.w	r3, r3, #4
 80043ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b2:	4b5c      	ldr	r3, [pc, #368]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	4a5a      	ldr	r2, [pc, #360]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c2:	e00f      	b.n	80043e4 <HAL_RCC_OscConfig+0x378>
 80043c4:	4b57      	ldr	r3, [pc, #348]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	4a56      	ldr	r2, [pc, #344]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d4:	4b53      	ldr	r3, [pc, #332]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	4a52      	ldr	r2, [pc, #328]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80043dc:	f023 0304 	bic.w	r3, r3, #4
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d016      	beq.n	800441a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fd f904 	bl	80015f8 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f4:	f7fd f900 	bl	80015f8 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e138      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800440a:	4b46      	ldr	r3, [pc, #280]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800440c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ed      	beq.n	80043f4 <HAL_RCC_OscConfig+0x388>
 8004418:	e015      	b.n	8004446 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd f8ed 	bl	80015f8 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fd f8e9 	bl	80015f8 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e121      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004438:	4b3a      	ldr	r3, [pc, #232]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ed      	bne.n	8004422 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004446:	7ffb      	ldrb	r3, [r7, #31]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444c:	4b35      	ldr	r3, [pc, #212]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	4a34      	ldr	r2, [pc, #208]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d03c      	beq.n	80044de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d01c      	beq.n	80044a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 800446e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004472:	4a2c      	ldr	r2, [pc, #176]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd f8bc 	bl	80015f8 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004484:	f7fd f8b8 	bl	80015f8 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e0f2      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <HAL_RCC_OscConfig+0x418>
 80044a4:	e01b      	b.n	80044de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fd f89f 	bl	80015f8 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044be:	f7fd f89b 	bl	80015f8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e0d5      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044d0:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ef      	bne.n	80044be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80c9 	beq.w	800467a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b0c      	cmp	r3, #12
 80044f2:	f000 8083 	beq.w	80045fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d15e      	bne.n	80045bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd f875 	bl	80015f8 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	e00c      	b.n	800452c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fd f871 	bl	80015f8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d905      	bls.n	800452c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0ab      	b.n	800467c <HAL_RCC_OscConfig+0x610>
 8004524:	40021000 	.word	0x40021000
 8004528:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	4b55      	ldr	r3, [pc, #340]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ec      	bne.n	8004512 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004538:	4b52      	ldr	r3, [pc, #328]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	4b52      	ldr	r3, [pc, #328]	; (8004688 <HAL_RCC_OscConfig+0x61c>)
 800453e:	4013      	ands	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6a11      	ldr	r1, [r2, #32]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004548:	3a01      	subs	r2, #1
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004552:	0212      	lsls	r2, r2, #8
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800455a:	0852      	lsrs	r2, r2, #1
 800455c:	3a01      	subs	r2, #1
 800455e:	0552      	lsls	r2, r2, #21
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004566:	0852      	lsrs	r2, r2, #1
 8004568:	3a01      	subs	r2, #1
 800456a:	0652      	lsls	r2, r2, #25
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004572:	06d2      	lsls	r2, r2, #27
 8004574:	430a      	orrs	r2, r1
 8004576:	4943      	ldr	r1, [pc, #268]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 8004578:	4313      	orrs	r3, r2
 800457a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a40      	ldr	r2, [pc, #256]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004588:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a3d      	ldr	r2, [pc, #244]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 800458e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004592:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd f830 	bl	80015f8 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd f82c 	bl	80015f8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e066      	b.n	800467c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ae:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x530>
 80045ba:	e05e      	b.n	800467a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 80045c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fd f816 	bl	80015f8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd f812 	bl	80015f8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e04c      	b.n	800467c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e2:	4b28      	ldr	r3, [pc, #160]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045ee:	4b25      	ldr	r3, [pc, #148]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	4924      	ldr	r1, [pc, #144]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_RCC_OscConfig+0x620>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	60cb      	str	r3, [r1, #12]
 80045fa:	e03e      	b.n	800467a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e039      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004608:	4b1e      	ldr	r3, [pc, #120]	; (8004684 <HAL_RCC_OscConfig+0x618>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0203 	and.w	r2, r3, #3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	429a      	cmp	r2, r3
 800461a:	d12c      	bne.n	8004676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	3b01      	subs	r3, #1
 8004628:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d123      	bne.n	8004676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d11b      	bne.n	8004676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d113      	bne.n	8004676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	3b01      	subs	r3, #1
 800465c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d109      	bne.n	8004676 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	3b01      	subs	r3, #1
 8004670:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40021000 	.word	0x40021000
 8004688:	019f800c 	.word	0x019f800c
 800468c:	feeefffc 	.word	0xfeeefffc

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e11e      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a8:	4b91      	ldr	r3, [pc, #580]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d910      	bls.n	80046d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b8e      	ldr	r3, [pc, #568]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 020f 	bic.w	r2, r3, #15
 80046be:	498c      	ldr	r1, [pc, #560]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b8a      	ldr	r3, [pc, #552]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e106      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d073      	beq.n	80047cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d129      	bne.n	8004740 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ec:	4b81      	ldr	r3, [pc, #516]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e0f4      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046fc:	f000 f99e 	bl	8004a3c <RCC_GetSysClockFreqFromPLLSource>
 8004700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4a7c      	ldr	r2, [pc, #496]	; (80048f8 <HAL_RCC_ClockConfig+0x268>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d93f      	bls.n	800478a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800470a:	4b7a      	ldr	r3, [pc, #488]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800471e:	2b00      	cmp	r3, #0
 8004720:	d033      	beq.n	800478a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004726:	2b00      	cmp	r3, #0
 8004728:	d12f      	bne.n	800478a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800472a:	4b72      	ldr	r3, [pc, #456]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004732:	4a70      	ldr	r2, [pc, #448]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e024      	b.n	800478a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d107      	bne.n	8004758 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004748:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0c6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004758:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0be      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004768:	f000 f8ce 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 800476c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <HAL_RCC_ClockConfig+0x268>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d909      	bls.n	800478a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004776:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477e:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004784:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4b5a      	ldr	r3, [pc, #360]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4957      	ldr	r1, [pc, #348]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004798:	4313      	orrs	r3, r2
 800479a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800479c:	f7fc ff2c 	bl	80015f8 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fc ff28 	bl	80015f8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e095      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b4e      	ldr	r3, [pc, #312]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 020c 	and.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1eb      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d023      	beq.n	8004820 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e4:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a42      	ldr	r2, [pc, #264]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80047ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047fc:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004804:	4a3b      	ldr	r2, [pc, #236]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800480a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4936      	ldr	r1, [pc, #216]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
 800481e:	e008      	b.n	8004832 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	d105      	bne.n	8004832 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004826:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	4a32      	ldr	r2, [pc, #200]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800482c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004830:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004832:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d21d      	bcs.n	800487c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 020f 	bic.w	r2, r3, #15
 8004848:	4929      	ldr	r1, [pc, #164]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004850:	f7fc fed2 	bl	80015f8 <HAL_GetTick>
 8004854:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	e00a      	b.n	800486e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004858:	f7fc fece 	bl	80015f8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	f241 3288 	movw	r2, #5000	; 0x1388
 8004866:	4293      	cmp	r3, r2
 8004868:	d901      	bls.n	800486e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e03b      	b.n	80048e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCC_ClockConfig+0x260>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d1ed      	bne.n	8004858 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4917      	ldr	r1, [pc, #92]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a6:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490f      	ldr	r1, [pc, #60]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ba:	f000 f825 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	490c      	ldr	r1, [pc, #48]	; (80048fc <HAL_RCC_ClockConfig+0x26c>)
 80048cc:	5ccb      	ldrb	r3, [r1, r3]
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x270>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_RCC_ClockConfig+0x274>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fe3e 	bl	8001560 <HAL_InitTick>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40021000 	.word	0x40021000
 80048f8:	04c4b400 	.word	0x04c4b400
 80048fc:	08008958 	.word	0x08008958
 8004900:	20000000 	.word	0x20000000
 8004904:	20000004 	.word	0x20000004

08004908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800490e:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b04      	cmp	r3, #4
 8004918:	d102      	bne.n	8004920 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800491a:	4b2a      	ldr	r3, [pc, #168]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	e047      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 030c 	and.w	r3, r3, #12
 8004928:	2b08      	cmp	r3, #8
 800492a:	d102      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800492c:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	e03e      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d136      	bne.n	80049ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	3301      	adds	r3, #1
 8004954:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800495c:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004966:	68d2      	ldr	r2, [r2, #12]
 8004968:	0a12      	lsrs	r2, r2, #8
 800496a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	617b      	str	r3, [r7, #20]
      break;
 8004974:	e00c      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004976:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004980:	68d2      	ldr	r2, [r2, #12]
 8004982:	0a12      	lsrs	r2, r2, #8
 8004984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]
      break;
 800498e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	0e5b      	lsrs	r3, r3, #25
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	3301      	adds	r3, #1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e001      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049b0:	693b      	ldr	r3, [r7, #16]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40021000 	.word	0x40021000
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	016e3600 	.word	0x016e3600

080049cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049d2:	681b      	ldr	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000000 	.word	0x20000000

080049e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049e8:	f7ff fff0 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4904      	ldr	r1, [pc, #16]	; (8004a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08008968 	.word	0x08008968

08004a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a14:	f7ff ffda 	bl	80049cc <HAL_RCC_GetHCLKFreq>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0adb      	lsrs	r3, r3, #11
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a26:	5ccb      	ldrb	r3, [r1, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	08008968 	.word	0x08008968

08004a3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	3301      	adds	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d10c      	bne.n	8004a7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a60:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	4a14      	ldr	r2, [pc, #80]	; (8004abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a6a:	68d2      	ldr	r2, [r2, #12]
 8004a6c:	0a12      	lsrs	r2, r2, #8
 8004a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	617b      	str	r3, [r7, #20]
    break;
 8004a78:	e00c      	b.n	8004a94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a7a:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	4a0e      	ldr	r2, [pc, #56]	; (8004abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	0a12      	lsrs	r2, r2, #8
 8004a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a8c:	fb02 f303 	mul.w	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]
    break;
 8004a92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	0e5b      	lsrs	r3, r3, #25
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004aae:	687b      	ldr	r3, [r7, #4]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	016e3600 	.word	0x016e3600
 8004ac4:	00f42400 	.word	0x00f42400

08004ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8098 	beq.w	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6593      	str	r3, [r2, #88]	; 0x58
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b12:	4b3a      	ldr	r3, [pc, #232]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a39      	ldr	r2, [pc, #228]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1e:	f7fc fd6b 	bl	80015f8 <HAL_GetTick>
 8004b22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b24:	e009      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b26:	f7fc fd67 	bl	80015f8 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	74fb      	strb	r3, [r7, #19]
        break;
 8004b38:	e005      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b3a:	4b30      	ldr	r3, [pc, #192]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ef      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d159      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01e      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d019      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b68:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b74:	4b20      	ldr	r3, [pc, #128]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b94:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fc fd27 	bl	80015f8 <HAL_GetTick>
 8004baa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fc fd23 	bl	80015f8 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d902      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ec      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be8:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bf0:	e008      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf2:	7cfb      	ldrb	r3, [r7, #19]
 8004bf4:	74bb      	strb	r3, [r7, #18]
 8004bf6:	e005      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c04:	7c7b      	ldrb	r3, [r7, #17]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0a:	4ba7      	ldr	r3, [pc, #668]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	4aa6      	ldr	r2, [pc, #664]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c22:	4ba1      	ldr	r3, [pc, #644]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f023 0203 	bic.w	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	499d      	ldr	r1, [pc, #628]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c44:	4b98      	ldr	r3, [pc, #608]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 020c 	bic.w	r2, r3, #12
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	4995      	ldr	r1, [pc, #596]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c66:	4b90      	ldr	r3, [pc, #576]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	498c      	ldr	r1, [pc, #560]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c88:	4b87      	ldr	r3, [pc, #540]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	4984      	ldr	r1, [pc, #528]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0310 	and.w	r3, r3, #16
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004caa:	4b7f      	ldr	r3, [pc, #508]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	497b      	ldr	r1, [pc, #492]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ccc:	4b76      	ldr	r3, [pc, #472]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	4973      	ldr	r1, [pc, #460]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cee:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	496a      	ldr	r1, [pc, #424]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d10:	4b65      	ldr	r3, [pc, #404]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	4962      	ldr	r1, [pc, #392]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d32:	4b5d      	ldr	r3, [pc, #372]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	4959      	ldr	r1, [pc, #356]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d54:	4b54      	ldr	r3, [pc, #336]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d5a:	f023 0203 	bic.w	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	4951      	ldr	r1, [pc, #324]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d76:	4b4c      	ldr	r3, [pc, #304]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	4948      	ldr	r1, [pc, #288]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d015      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d98:	4b43      	ldr	r3, [pc, #268]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	4940      	ldr	r1, [pc, #256]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db8:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	4a3a      	ldr	r2, [pc, #232]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d015      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dd0:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	4932      	ldr	r1, [pc, #200]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dee:	d105      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d015      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e08:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	4924      	ldr	r1, [pc, #144]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e28:	4b1f      	ldr	r3, [pc, #124]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d015      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	4916      	ldr	r1, [pc, #88]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d019      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	4908      	ldr	r1, [pc, #32]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e96:	d109      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a02      	ldr	r2, [pc, #8]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea2:	60d3      	str	r3, [r2, #12]
 8004ea4:	e002      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d015      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	4926      	ldr	r1, [pc, #152]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ed8:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efe:	4918      	ldr	r1, [pc, #96]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d015      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f36:	490a      	ldr	r1, [pc, #40]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f46:	d105      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f54:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000

08004f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e09d      	b.n	80050b2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f86:	d009      	beq.n	8004f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	61da      	str	r2, [r3, #28]
 8004f8e:	e005      	b.n	8004f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc f8ea 	bl	8001190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fdc:	d902      	bls.n	8004fe4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e002      	b.n	8004fea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fe8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ff2:	d007      	beq.n	8005004 <HAL_SPI_Init+0xa0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	ea42 0103 	orr.w	r1, r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	f003 0204 	and.w	r2, r3, #4
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005080:	ea42 0103 	orr.w	r1, r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050d4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050dc:	7dbb      	ldrb	r3, [r7, #22]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d00d      	beq.n	80050fe <HAL_SPI_TransmitReceive_IT+0x42>
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e8:	d106      	bne.n	80050f8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <HAL_SPI_TransmitReceive_IT+0x3c>
 80050f2:	7dbb      	ldrb	r3, [r7, #22]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d002      	beq.n	80050fe <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
 80050fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80050fc:	e07d      	b.n	80051fa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d005      	beq.n	8005110 <HAL_SPI_TransmitReceive_IT+0x54>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_TransmitReceive_IT+0x54>
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d102      	bne.n	8005116 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005114:	e071      	b.n	80051fa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_SPI_TransmitReceive_IT+0x68>
 8005120:	2302      	movs	r3, #2
 8005122:	e06b      	b.n	80051fc <HAL_SPI_TransmitReceive_IT+0x140>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b04      	cmp	r3, #4
 8005136:	d003      	beq.n	8005140 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2205      	movs	r2, #5
 800513c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	887a      	ldrh	r2, [r7, #2]
 8005150:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	887a      	ldrh	r2, [r7, #2]
 8005156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	887a      	ldrh	r2, [r7, #2]
 800516a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005176:	d906      	bls.n	8005186 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a23      	ldr	r2, [pc, #140]	; (8005208 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800517c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <HAL_SPI_TransmitReceive_IT+0x150>)
 8005182:	651a      	str	r2, [r3, #80]	; 0x50
 8005184:	e005      	b.n	8005192 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_SPI_TransmitReceive_IT+0x154>)
 800518a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a21      	ldr	r2, [pc, #132]	; (8005214 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005190:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800519a:	d802      	bhi.n	80051a2 <HAL_SPI_TransmitReceive_IT+0xe6>
 800519c:	887b      	ldrh	r3, [r7, #2]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d908      	bls.n	80051b4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e007      	b.n	80051c4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051c2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d007      	beq.n	80051e2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80051f8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	080055a3 	.word	0x080055a3
 800520c:	08005609 	.word	0x08005609
 8005210:	08005453 	.word	0x08005453
 8005214:	08005511 	.word	0x08005511

08005218 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10e      	bne.n	8005258 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005240:	2b00      	cmp	r3, #0
 8005242:	d009      	beq.n	8005258 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d004      	beq.n	8005258 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
    return;
 8005256:	e0ce      	b.n	80053f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_SPI_IRQHandler+0x5e>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
    return;
 8005274:	e0bf      	b.n	80053f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <HAL_SPI_IRQHandler+0x7e>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d105      	bne.n	8005296 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80b0 	beq.w	80053f6 <HAL_SPI_IRQHandler+0x1de>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80aa 	beq.w	80053f6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d023      	beq.n	80052f4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d011      	beq.n	80052dc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052bc:	f043 0204 	orr.w	r2, r3, #4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	e00b      	b.n	80052f4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
        return;
 80052f2:	e080      	b.n	80053f6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d014      	beq.n	8005328 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005336:	f043 0208 	orr.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	2b00      	cmp	r3, #0
 8005352:	d04f      	beq.n	80053f4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005362:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <HAL_SPI_IRQHandler+0x168>
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d034      	beq.n	80053ea <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0203 	bic.w	r2, r2, #3
 800538e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	2b00      	cmp	r3, #0
 8005396:	d011      	beq.n	80053bc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539c:	4a17      	ldr	r2, [pc, #92]	; (80053fc <HAL_SPI_IRQHandler+0x1e4>)
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fc fbe1 	bl	8001b6c <HAL_DMA_Abort_IT>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d016      	beq.n	80053f2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <HAL_SPI_IRQHandler+0x1e4>)
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fc fbcb 	bl	8001b6c <HAL_DMA_Abort_IT>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80053e8:	e003      	b.n	80053f2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f812 	bl	8005414 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80053f0:	e000      	b.n	80053f4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80053f2:	bf00      	nop
    return;
 80053f4:	bf00      	nop
  }
}
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	08005429 	.word	0x08005429

08005400 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f7ff ffe5 	bl	8005414 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d923      	bls.n	80054ae <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	b292      	uxth	r2, r2
 8005472:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b02      	subs	r3, #2
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	d11f      	bne.n	80054dc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	e016      	b.n	80054dc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f103 020c 	add.w	r2, r3, #12
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10f      	bne.n	8005508 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054f6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa14 	bl	8005930 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005508:	bf00      	nop
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b01      	cmp	r3, #1
 8005520:	d912      	bls.n	8005548 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	881a      	ldrh	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	1c9a      	adds	r2, r3, #2
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b02      	subs	r3, #2
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005546:	e012      	b.n	800556e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	7812      	ldrb	r2, [r2, #0]
 8005554:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d110      	bne.n	800559a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005586:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f9cb 	bl	8005930 <SPI_CloseRxTx_ISR>
    }
  }
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	b292      	uxth	r2, r2
 80055b6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	1c9a      	adds	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10f      	bne.n	8005600 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f998 	bl	8005930 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d110      	bne.n	8005660 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f968 	bl	8005930 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005678:	f7fb ffbe 	bl	80015f8 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005688:	f7fb ffb6 	bl	80015f8 <HAL_GetTick>
 800568c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	015b      	lsls	r3, r3, #5
 8005694:	0d1b      	lsrs	r3, r3, #20
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569e:	e054      	b.n	800574a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d050      	beq.n	800574a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a8:	f7fb ffa6 	bl	80015f8 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d902      	bls.n	80056be <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d13d      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d111      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e0:	d004      	beq.n	80056ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ea:	d107      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d10f      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e017      	b.n	800576a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	3b01      	subs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d19b      	bne.n	80056a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000000 	.word	0x20000000

08005778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800578a:	f7fb ff35 	bl	80015f8 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800579a:	f7fb ff2d 	bl	80015f8 <HAL_GetTick>
 800579e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057a8:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00da      	lsls	r2, r3, #3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	0d1b      	lsrs	r3, r3, #20
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057c0:	e060      	b.n	8005884 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057c8:	d107      	bne.n	80057da <SPI_WaitFifoStateUntilTimeout+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d050      	beq.n	8005884 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057e2:	f7fb ff09 	bl	80015f8 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d902      	bls.n	80057f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13d      	bne.n	8005874 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005810:	d111      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d004      	beq.n	8005826 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d107      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	d10f      	bne.n	8005860 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e010      	b.n	8005896 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3b01      	subs	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d196      	bne.n	80057c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3728      	adds	r7, #40	; 0x28
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000000 	.word	0x20000000

080058a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff5b 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e027      	b.n	8005928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2200      	movs	r2, #0
 80058e0:	2180      	movs	r1, #128	; 0x80
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fec0 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e014      	b.n	8005928 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff ff34 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800591a:	f043 0220 	orr.w	r2, r3, #32
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e000      	b.n	8005928 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005938:	f7fb fe5e 	bl	80015f8 <HAL_GetTick>
 800593c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0220 	bic.w	r2, r2, #32
 800594c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	2164      	movs	r1, #100	; 0x64
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ffa6 	bl	80058a4 <SPI_EndRxTxTransaction>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596e:	2b00      	cmp	r3, #0
 8005970:	d115      	bne.n	800599e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b04      	cmp	r3, #4
 800597c:	d107      	bne.n	800598e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fd3a 	bl	8005400 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800598c:	e00e      	b.n	80059ac <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb f96e 	bl	8000c78 <HAL_SPI_TxRxCpltCallback>
}
 800599c:	e006      	b.n	80059ac <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fd34 	bl	8005414 <HAL_SPI_ErrorCallback>
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e042      	b.n	8005a4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d106      	bne.n	80059de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7fb fb1d 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2224      	movs	r2, #36	; 0x24
 80059e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 ffd6 	bl	80069b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fcd7 	bl	80063b8 <UART_SetConfig>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e01b      	b.n	8005a4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 f855 	bl	8006af4 <UART_CheckIdleState>
 8005a4a:	4603      	mov	r3, r0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b08a      	sub	sp, #40	; 0x28
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d17b      	bne.n	8005b66 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_UART_Transmit+0x26>
 8005a74:	88fb      	ldrh	r3, [r7, #6]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e074      	b.n	8005b68 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2221      	movs	r2, #33	; 0x21
 8005a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a8e:	f7fb fdb3 	bl	80015f8 <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	88fa      	ldrh	r2, [r7, #6]
 8005a98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aac:	d108      	bne.n	8005ac0 <HAL_UART_Transmit+0x6c>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e003      	b.n	8005ac8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ac8:	e030      	b.n	8005b2c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f001 f8b7 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e03d      	b.n	8005b68 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	3302      	adds	r3, #2
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e007      	b.n	8005b1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1c8      	bne.n	8005aca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2140      	movs	r1, #64	; 0x40
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 f880 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e000      	b.n	8005b68 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
  }
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d167      	bne.n	8005c58 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Transmit_DMA+0x24>
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e060      	b.n	8005c5a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2221      	movs	r2, #33	; 0x21
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d028      	beq.n	8005c18 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bca:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <HAL_UART_Transmit_DMA+0xf4>)
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd2:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <HAL_UART_Transmit_DMA+0xf8>)
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bda:	4a24      	ldr	r2, [pc, #144]	; (8005c6c <HAL_UART_Transmit_DMA+0xfc>)
 8005bdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be2:	2200      	movs	r2, #0
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3328      	adds	r3, #40	; 0x28
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	f7fb fee3 	bl	80019c4 <HAL_DMA_Start_IT>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2210      	movs	r2, #16
 8005c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e020      	b.n	8005c5a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2240      	movs	r2, #64	; 0x40
 8005c1e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3308      	adds	r3, #8
 8005c26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	623a      	str	r2, [r7, #32]
 8005c42:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e5      	bne.n	8005c20 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3728      	adds	r7, #40	; 0x28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	08006fbf 	.word	0x08006fbf
 8005c68:	08007059 	.word	0x08007059
 8005c6c:	080071df 	.word	0x080071df

08005c70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d137      	bne.n	8005cf8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_UART_Receive_DMA+0x24>
 8005c8e:	88fb      	ldrh	r3, [r7, #6]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e030      	b.n	8005cfa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <HAL_UART_Receive_DMA+0x94>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d01f      	beq.n	8005ce8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f001 f818 	bl	8006d24 <UART_Start_Receive_DMA>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	e000      	b.n	8005cfa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3728      	adds	r7, #40	; 0x28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	40008000 	.word	0x40008000

08005d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b0ba      	sub	sp, #232	; 0xe8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d36:	4013      	ands	r3, r2
 8005d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11b      	bne.n	8005d7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d015      	beq.n	8005d7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d54:	f003 0320 	and.w	r3, r3, #32
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 82e3 	beq.w	8006338 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
      }
      return;
 8005d7a:	e2dd      	b.n	8006338 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 8123 	beq.w	8005fcc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d8a:	4b8d      	ldr	r3, [pc, #564]	; (8005fc0 <HAL_UART_IRQHandler+0x2b8>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d96:	4b8b      	ldr	r3, [pc, #556]	; (8005fc4 <HAL_UART_IRQHandler+0x2bc>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8116 	beq.w	8005fcc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d011      	beq.n	8005dd0 <HAL_UART_IRQHandler+0xc8>
 8005dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f043 0201 	orr.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d011      	beq.n	8005e00 <HAL_UART_IRQHandler+0xf8>
 8005ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2202      	movs	r2, #2
 8005dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d011      	beq.n	8005e30 <HAL_UART_IRQHandler+0x128>
 8005e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f043 0202 	orr.w	r2, r3, #2
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d017      	beq.n	8005e6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e4c:	4b5c      	ldr	r3, [pc, #368]	; (8005fc0 <HAL_UART_IRQHandler+0x2b8>)
 8005e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e62:	f043 0208 	orr.w	r2, r3, #8
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d012      	beq.n	8005e9e <HAL_UART_IRQHandler+0x196>
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00c      	beq.n	8005e9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e94:	f043 0220 	orr.w	r2, r3, #32
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8249 	beq.w	800633c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d013      	beq.n	8005ede <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eba:	f003 0320 	and.w	r3, r3, #32
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d005      	beq.n	8005f02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005efa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d054      	beq.n	8005fac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fff5 	bl	8006ef2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d146      	bne.n	8005fa4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1d9      	bne.n	8005f16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d017      	beq.n	8005f9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <HAL_UART_IRQHandler+0x2c0>)
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fb fdf5 	bl	8001b6c <HAL_DMA_Abort_IT>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d019      	beq.n	8005fbc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005f96:	4610      	mov	r0, r2
 8005f98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9a:	e00f      	b.n	8005fbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f9f5 	bl	800638c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa2:	e00b      	b.n	8005fbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9f1 	bl	800638c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005faa:	e007      	b.n	8005fbc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f9ed 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005fba:	e1bf      	b.n	800633c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	bf00      	nop
    return;
 8005fbe:	e1bd      	b.n	800633c <HAL_UART_IRQHandler+0x634>
 8005fc0:	10000001 	.word	0x10000001
 8005fc4:	04000120 	.word	0x04000120
 8005fc8:	0800725f 	.word	0x0800725f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	f040 8153 	bne.w	800627c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 814c 	beq.w	800627c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8145 	beq.w	800627c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	f040 80bb 	bne.w	8006180 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 818f 	beq.w	8006340 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800602c:	429a      	cmp	r2, r3
 800602e:	f080 8187 	bcs.w	8006340 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006038:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 8087 	bne.w	800615e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800606c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800607a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800607e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006086:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1da      	bne.n	8006050 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e1      	bne.n	800609a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006100:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e3      	bne.n	80060d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800612a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612c:	f023 0310 	bic.w	r3, r3, #16
 8006130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800613e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006140:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800614c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e4      	bne.n	800611c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006158:	4618      	mov	r0, r3
 800615a:	f7fb fcae 	bl	8001aba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006170:	b29b      	uxth	r3, r3
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	b29b      	uxth	r3, r3
 8006176:	4619      	mov	r1, r3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f911 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800617e:	e0df      	b.n	8006340 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800618c:	b29b      	uxth	r3, r3
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80d1 	beq.w	8006344 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80061a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80cc 	beq.w	8006344 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
 80061d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e4      	bne.n	80061ac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	623b      	str	r3, [r7, #32]
   return(result);
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f8:	f023 0301 	bic.w	r3, r3, #1
 80061fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800620a:	633a      	str	r2, [r7, #48]	; 0x30
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e1      	bne.n	80061e2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0310 	bic.w	r3, r3, #16
 8006246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	617b      	str	r3, [r7, #20]
   return(result);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e4      	bne.n	8006232 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800626e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f893 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800627a:	e063      	b.n	8006344 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00e      	beq.n	80062a6 <HAL_UART_IRQHandler+0x59e>
 8006288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800629c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 f81e 	bl	80072e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062a4:	e051      	b.n	800634a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d014      	beq.n	80062dc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d03a      	beq.n	8006348 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
    }
    return;
 80062da:	e035      	b.n	8006348 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <HAL_UART_IRQHandler+0x5f4>
 80062e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 ffc8 	bl	800728a <UART_EndTransmit_IT>
    return;
 80062fa:	e026      	b.n	800634a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <HAL_UART_IRQHandler+0x614>
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fff7 	bl	8007308 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800631a:	e016      	b.n	800634a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800631c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <HAL_UART_IRQHandler+0x642>
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632c:	2b00      	cmp	r3, #0
 800632e:	da0c      	bge.n	800634a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 ffdf 	bl	80072f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006336:	e008      	b.n	800634a <HAL_UART_IRQHandler+0x642>
      return;
 8006338:	bf00      	nop
 800633a:	e006      	b.n	800634a <HAL_UART_IRQHandler+0x642>
    return;
 800633c:	bf00      	nop
 800633e:	e004      	b.n	800634a <HAL_UART_IRQHandler+0x642>
      return;
 8006340:	bf00      	nop
 8006342:	e002      	b.n	800634a <HAL_UART_IRQHandler+0x642>
      return;
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <HAL_UART_IRQHandler+0x642>
    return;
 8006348:	bf00      	nop
  }
}
 800634a:	37e8      	adds	r7, #232	; 0xe8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063bc:	b08c      	sub	sp, #48	; 0x30
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	4313      	orrs	r3, r2
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4baa      	ldr	r3, [pc, #680]	; (8006690 <UART_SetConfig+0x2d8>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a9f      	ldr	r2, [pc, #636]	; (8006694 <UART_SetConfig+0x2dc>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006420:	4313      	orrs	r3, r2
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800642e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006438:	430b      	orrs	r3, r1
 800643a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	f023 010f 	bic.w	r1, r3, #15
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a90      	ldr	r2, [pc, #576]	; (8006698 <UART_SetConfig+0x2e0>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d125      	bne.n	80064a8 <UART_SetConfig+0xf0>
 800645c:	4b8f      	ldr	r3, [pc, #572]	; (800669c <UART_SetConfig+0x2e4>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d81a      	bhi.n	80064a0 <UART_SetConfig+0xe8>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0xb8>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006481 	.word	0x08006481
 8006474:	08006491 	.word	0x08006491
 8006478:	08006489 	.word	0x08006489
 800647c:	08006499 	.word	0x08006499
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006486:	e116      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006488:	2302      	movs	r3, #2
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648e:	e112      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006496:	e10e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649e:	e10a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a6:	e106      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a7c      	ldr	r2, [pc, #496]	; (80066a0 <UART_SetConfig+0x2e8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d138      	bne.n	8006524 <UART_SetConfig+0x16c>
 80064b2:	4b7a      	ldr	r3, [pc, #488]	; (800669c <UART_SetConfig+0x2e4>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f003 030c 	and.w	r3, r3, #12
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d82d      	bhi.n	800651c <UART_SetConfig+0x164>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0x110>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	0800651d 	.word	0x0800651d
 80064d0:	0800651d 	.word	0x0800651d
 80064d4:	0800651d 	.word	0x0800651d
 80064d8:	0800650d 	.word	0x0800650d
 80064dc:	0800651d 	.word	0x0800651d
 80064e0:	0800651d 	.word	0x0800651d
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	08006505 	.word	0x08006505
 80064ec:	0800651d 	.word	0x0800651d
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006515 	.word	0x08006515
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e0d8      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e0d4      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e0d0      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e0cc      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e0c8      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <UART_SetConfig+0x2ec>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d125      	bne.n	800657a <UART_SetConfig+0x1c2>
 800652e:	4b5b      	ldr	r3, [pc, #364]	; (800669c <UART_SetConfig+0x2e4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d016      	beq.n	800656a <UART_SetConfig+0x1b2>
 800653c:	2b30      	cmp	r3, #48	; 0x30
 800653e:	d818      	bhi.n	8006572 <UART_SetConfig+0x1ba>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d00a      	beq.n	800655a <UART_SetConfig+0x1a2>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d814      	bhi.n	8006572 <UART_SetConfig+0x1ba>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <UART_SetConfig+0x19a>
 800654c:	2b10      	cmp	r3, #16
 800654e:	d008      	beq.n	8006562 <UART_SetConfig+0x1aa>
 8006550:	e00f      	b.n	8006572 <UART_SetConfig+0x1ba>
 8006552:	2300      	movs	r3, #0
 8006554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006558:	e0ad      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800655a:	2302      	movs	r3, #2
 800655c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006560:	e0a9      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006562:	2304      	movs	r3, #4
 8006564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006568:	e0a5      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800656a:	2308      	movs	r3, #8
 800656c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006570:	e0a1      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006572:	2310      	movs	r3, #16
 8006574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006578:	e09d      	b.n	80066b6 <UART_SetConfig+0x2fe>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a4a      	ldr	r2, [pc, #296]	; (80066a8 <UART_SetConfig+0x2f0>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d125      	bne.n	80065d0 <UART_SetConfig+0x218>
 8006584:	4b45      	ldr	r3, [pc, #276]	; (800669c <UART_SetConfig+0x2e4>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800658e:	2bc0      	cmp	r3, #192	; 0xc0
 8006590:	d016      	beq.n	80065c0 <UART_SetConfig+0x208>
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d818      	bhi.n	80065c8 <UART_SetConfig+0x210>
 8006596:	2b80      	cmp	r3, #128	; 0x80
 8006598:	d00a      	beq.n	80065b0 <UART_SetConfig+0x1f8>
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d814      	bhi.n	80065c8 <UART_SetConfig+0x210>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <UART_SetConfig+0x1f0>
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d008      	beq.n	80065b8 <UART_SetConfig+0x200>
 80065a6:	e00f      	b.n	80065c8 <UART_SetConfig+0x210>
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e082      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065b0:	2302      	movs	r3, #2
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e07e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e07a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e076      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e072      	b.n	80066b6 <UART_SetConfig+0x2fe>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a35      	ldr	r2, [pc, #212]	; (80066ac <UART_SetConfig+0x2f4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d12a      	bne.n	8006630 <UART_SetConfig+0x278>
 80065da:	4b30      	ldr	r3, [pc, #192]	; (800669c <UART_SetConfig+0x2e4>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e8:	d01a      	beq.n	8006620 <UART_SetConfig+0x268>
 80065ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ee:	d81b      	bhi.n	8006628 <UART_SetConfig+0x270>
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	d00c      	beq.n	8006610 <UART_SetConfig+0x258>
 80065f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fa:	d815      	bhi.n	8006628 <UART_SetConfig+0x270>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <UART_SetConfig+0x250>
 8006600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006604:	d008      	beq.n	8006618 <UART_SetConfig+0x260>
 8006606:	e00f      	b.n	8006628 <UART_SetConfig+0x270>
 8006608:	2300      	movs	r3, #0
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e052      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006610:	2302      	movs	r3, #2
 8006612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006616:	e04e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006618:	2304      	movs	r3, #4
 800661a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800661e:	e04a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006620:	2308      	movs	r3, #8
 8006622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006626:	e046      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006628:	2310      	movs	r3, #16
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800662e:	e042      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a17      	ldr	r2, [pc, #92]	; (8006694 <UART_SetConfig+0x2dc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d13a      	bne.n	80066b0 <UART_SetConfig+0x2f8>
 800663a:	4b18      	ldr	r3, [pc, #96]	; (800669c <UART_SetConfig+0x2e4>)
 800663c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006648:	d01a      	beq.n	8006680 <UART_SetConfig+0x2c8>
 800664a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800664e:	d81b      	bhi.n	8006688 <UART_SetConfig+0x2d0>
 8006650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006654:	d00c      	beq.n	8006670 <UART_SetConfig+0x2b8>
 8006656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800665a:	d815      	bhi.n	8006688 <UART_SetConfig+0x2d0>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <UART_SetConfig+0x2b0>
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d008      	beq.n	8006678 <UART_SetConfig+0x2c0>
 8006666:	e00f      	b.n	8006688 <UART_SetConfig+0x2d0>
 8006668:	2300      	movs	r3, #0
 800666a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800666e:	e022      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006670:	2302      	movs	r3, #2
 8006672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006676:	e01e      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006678:	2304      	movs	r3, #4
 800667a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800667e:	e01a      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006680:	2308      	movs	r3, #8
 8006682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006686:	e016      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006688:	2310      	movs	r3, #16
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e012      	b.n	80066b6 <UART_SetConfig+0x2fe>
 8006690:	cfff69f3 	.word	0xcfff69f3
 8006694:	40008000 	.word	0x40008000
 8006698:	40013800 	.word	0x40013800
 800669c:	40021000 	.word	0x40021000
 80066a0:	40004400 	.word	0x40004400
 80066a4:	40004800 	.word	0x40004800
 80066a8:	40004c00 	.word	0x40004c00
 80066ac:	40005000 	.word	0x40005000
 80066b0:	2310      	movs	r3, #16
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4aae      	ldr	r2, [pc, #696]	; (8006974 <UART_SetConfig+0x5bc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	f040 8097 	bne.w	80067f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d823      	bhi.n	8006712 <UART_SetConfig+0x35a>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <UART_SetConfig+0x318>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	08006713 	.word	0x08006713
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006713 	.word	0x08006713
 80066e0:	08006703 	.word	0x08006703
 80066e4:	08006713 	.word	0x08006713
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006713 	.word	0x08006713
 80066f0:	0800670b 	.word	0x0800670b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe f976 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 80066f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066fa:	e010      	b.n	800671e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fc:	4b9e      	ldr	r3, [pc, #632]	; (8006978 <UART_SetConfig+0x5c0>)
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006700:	e00d      	b.n	800671e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006702:	f7fe f901 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006708:	e009      	b.n	800671e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006710:	e005      	b.n	800671e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800671c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8130 	beq.w	8006986 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	4a94      	ldr	r2, [pc, #592]	; (800697c <UART_SetConfig+0x5c4>)
 800672c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006730:	461a      	mov	r2, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	fbb3 f3f2 	udiv	r3, r3, r2
 8006738:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	4413      	add	r3, r2
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	429a      	cmp	r2, r3
 8006748:	d305      	bcc.n	8006756 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	429a      	cmp	r2, r3
 8006754:	d903      	bls.n	800675e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800675c:	e113      	b.n	8006986 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2200      	movs	r2, #0
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	60fa      	str	r2, [r7, #12]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	4a84      	ldr	r2, [pc, #528]	; (800697c <UART_SetConfig+0x5c4>)
 800676c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006770:	b29b      	uxth	r3, r3
 8006772:	2200      	movs	r2, #0
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006780:	f7f9 fda6 	bl	80002d0 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	020b      	lsls	r3, r1, #8
 8006796:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800679a:	0202      	lsls	r2, r0, #8
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	6849      	ldr	r1, [r1, #4]
 80067a0:	0849      	lsrs	r1, r1, #1
 80067a2:	2000      	movs	r0, #0
 80067a4:	460c      	mov	r4, r1
 80067a6:	4605      	mov	r5, r0
 80067a8:	eb12 0804 	adds.w	r8, r2, r4
 80067ac:	eb43 0905 	adc.w	r9, r3, r5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	469a      	mov	sl, r3
 80067b8:	4693      	mov	fp, r2
 80067ba:	4652      	mov	r2, sl
 80067bc:	465b      	mov	r3, fp
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 fd85 	bl	80002d0 <__aeabi_uldivmod>
 80067c6:	4602      	mov	r2, r0
 80067c8:	460b      	mov	r3, r1
 80067ca:	4613      	mov	r3, r2
 80067cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067d4:	d308      	bcc.n	80067e8 <UART_SetConfig+0x430>
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067dc:	d204      	bcs.n	80067e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6a3a      	ldr	r2, [r7, #32]
 80067e4:	60da      	str	r2, [r3, #12]
 80067e6:	e0ce      	b.n	8006986 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067ee:	e0ca      	b.n	8006986 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067f8:	d166      	bne.n	80068c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80067fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d827      	bhi.n	8006852 <UART_SetConfig+0x49a>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <UART_SetConfig+0x450>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800682d 	.word	0x0800682d
 800680c:	08006835 	.word	0x08006835
 8006810:	0800683d 	.word	0x0800683d
 8006814:	08006853 	.word	0x08006853
 8006818:	08006843 	.word	0x08006843
 800681c:	08006853 	.word	0x08006853
 8006820:	08006853 	.word	0x08006853
 8006824:	08006853 	.word	0x08006853
 8006828:	0800684b 	.word	0x0800684b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682c:	f7fe f8da 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006832:	e014      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006834:	f7fe f8ec 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800683a:	e010      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800683c:	4b4e      	ldr	r3, [pc, #312]	; (8006978 <UART_SetConfig+0x5c0>)
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006840:	e00d      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe f861 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006846:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006848:	e009      	b.n	800685e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006850:	e005      	b.n	800685e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800685c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8090 	beq.w	8006986 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	4a44      	ldr	r2, [pc, #272]	; (800697c <UART_SetConfig+0x5c4>)
 800686c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006870:	461a      	mov	r2, r3
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	fbb3 f3f2 	udiv	r3, r3, r2
 8006878:	005a      	lsls	r2, r3, #1
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	441a      	add	r2, r3
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b0f      	cmp	r3, #15
 8006890:	d916      	bls.n	80068c0 <UART_SetConfig+0x508>
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006898:	d212      	bcs.n	80068c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f023 030f 	bic.w	r3, r3, #15
 80068a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	8bfb      	ldrh	r3, [r7, #30]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	8bfa      	ldrh	r2, [r7, #30]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	e062      	b.n	8006986 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068c6:	e05e      	b.n	8006986 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d828      	bhi.n	8006922 <UART_SetConfig+0x56a>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <UART_SetConfig+0x520>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	080068fd 	.word	0x080068fd
 80068dc:	08006905 	.word	0x08006905
 80068e0:	0800690d 	.word	0x0800690d
 80068e4:	08006923 	.word	0x08006923
 80068e8:	08006913 	.word	0x08006913
 80068ec:	08006923 	.word	0x08006923
 80068f0:	08006923 	.word	0x08006923
 80068f4:	08006923 	.word	0x08006923
 80068f8:	0800691b 	.word	0x0800691b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068fc:	f7fe f872 	bl	80049e4 <HAL_RCC_GetPCLK1Freq>
 8006900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006902:	e014      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006904:	f7fe f884 	bl	8004a10 <HAL_RCC_GetPCLK2Freq>
 8006908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800690a:	e010      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <UART_SetConfig+0x5c0>)
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006910:	e00d      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006912:	f7fd fff9 	bl	8004908 <HAL_RCC_GetSysClockFreq>
 8006916:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006918:	e009      	b.n	800692e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006920:	e005      	b.n	800692e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800692c:	bf00      	nop
    }

    if (pclk != 0U)
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	2b00      	cmp	r3, #0
 8006932:	d028      	beq.n	8006986 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	4a10      	ldr	r2, [pc, #64]	; (800697c <UART_SetConfig+0x5c4>)
 800693a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800693e:	461a      	mov	r2, r3
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	fbb3 f2f2 	udiv	r2, r3, r2
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	085b      	lsrs	r3, r3, #1
 800694c:	441a      	add	r2, r3
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b0f      	cmp	r3, #15
 800695c:	d910      	bls.n	8006980 <UART_SetConfig+0x5c8>
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d20c      	bcs.n	8006980 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	b29a      	uxth	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	e009      	b.n	8006986 <UART_SetConfig+0x5ce>
 8006972:	bf00      	nop
 8006974:	40008000 	.word	0x40008000
 8006978:	00f42400 	.word	0x00f42400
 800697c:	08008970 	.word	0x08008970
      }
      else
      {
        ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2201      	movs	r2, #1
 800698a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2201      	movs	r2, #1
 8006992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2200      	movs	r2, #0
 80069a0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3730      	adds	r7, #48	; 0x30
 80069aa:	46bd      	mov	sp, r7
 80069ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080069b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00a      	beq.n	8006a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	f003 0310 	and.w	r3, r3, #16
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f003 0320 	and.w	r3, r3, #32
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01a      	beq.n	8006ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aae:	d10a      	bne.n	8006ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	605a      	str	r2, [r3, #4]
  }
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b098      	sub	sp, #96	; 0x60
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b04:	f7fa fd78 	bl	80015f8 <HAL_GetTick>
 8006b08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d12f      	bne.n	8006b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b20:	2200      	movs	r2, #0
 8006b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f88e 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d022      	beq.n	8006b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b46:	653b      	str	r3, [r7, #80]	; 0x50
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
 8006b52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e6      	bne.n	8006b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e063      	b.n	8006c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d149      	bne.n	8006c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f857 	bl	8006c48 <UART_WaitOnFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d03c      	beq.n	8006c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	623b      	str	r3, [r7, #32]
   return(result);
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8006bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf2:	61fa      	str	r2, [r7, #28]
 8006bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e012      	b.n	8006c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3758      	adds	r7, #88	; 0x58
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c58:	e04f      	b.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d04b      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c62:	f7fa fcc9 	bl	80015f8 <HAL_GetTick>
 8006c66:	4602      	mov	r2, r0
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e04e      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d037      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2b80      	cmp	r3, #128	; 0x80
 8006c8e:	d034      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d031      	beq.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d110      	bne.n	8006cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f920 	bl	8006ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e029      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd4:	d111      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f906 	bl	8006ef2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e00f      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d0a0      	beq.n	8006c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2222      	movs	r2, #34	; 0x22
 8006d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02d      	beq.n	8006db6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d60:	4a40      	ldr	r2, [pc, #256]	; (8006e64 <UART_Start_Receive_DMA+0x140>)
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6a:	4a3f      	ldr	r2, [pc, #252]	; (8006e68 <UART_Start_Receive_DMA+0x144>)
 8006d6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	4a3d      	ldr	r2, [pc, #244]	; (8006e6c <UART_Start_Receive_DMA+0x148>)
 8006d76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d7e:	2200      	movs	r2, #0
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3324      	adds	r3, #36	; 0x24
 8006d8e:	4619      	mov	r1, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	461a      	mov	r2, r3
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	f7fa fe14 	bl	80019c4 <HAL_DMA_Start_IT>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2210      	movs	r2, #16
 8006da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e051      	b.n	8006e5a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dde:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	f043 0301 	orr.w	r3, r3, #1
 8006e06:	653b      	str	r3, [r7, #80]	; 0x50
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e10:	637a      	str	r2, [r7, #52]	; 0x34
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e5      	bne.n	8006df0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	613b      	str	r3, [r7, #16]
   return(result);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e44:	623a      	str	r2, [r7, #32]
 8006e46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69f9      	ldr	r1, [r7, #28]
 8006e4a:	6a3a      	ldr	r2, [r7, #32]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3758      	adds	r7, #88	; 0x58
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	08007075 	.word	0x08007075
 8006e68:	080071a1 	.word	0x080071a1
 8006e6c:	080071df 	.word	0x080071df

08006e70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b08f      	sub	sp, #60	; 0x3c
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3308      	adds	r3, #8
 8006eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3308      	adds	r3, #8
 8006ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eca:	61ba      	str	r2, [r7, #24]
 8006ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6979      	ldr	r1, [r7, #20]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e5      	bne.n	8006eaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006ee6:	bf00      	nop
 8006ee8:	373c      	adds	r7, #60	; 0x3c
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b095      	sub	sp, #84	; 0x54
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f18:	643b      	str	r3, [r7, #64]	; 0x40
 8006f1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e6      	bne.n	8006efa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3308      	adds	r3, #8
 8006f4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e3      	bne.n	8006f2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d118      	bne.n	8006f9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f023 0310 	bic.w	r3, r3, #16
 8006f80:	647b      	str	r3, [r7, #68]	; 0x44
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6979      	ldr	r1, [r7, #20]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	613b      	str	r3, [r7, #16]
   return(result);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e6      	bne.n	8006f6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fb2:	bf00      	nop
 8006fb4:	3754      	adds	r7, #84	; 0x54
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b090      	sub	sp, #64	; 0x40
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d137      	bne.n	800704a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007002:	633a      	str	r2, [r7, #48]	; 0x30
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	60fb      	str	r3, [r7, #12]
   return(result);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	61fb      	str	r3, [r7, #28]
 8007036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	69b9      	ldr	r1, [r7, #24]
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	617b      	str	r3, [r7, #20]
   return(result);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e6      	bne.n	8007016 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007048:	e002      	b.n	8007050 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800704a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800704c:	f7ff f980 	bl	8006350 <HAL_UART_TxCpltCallback>
}
 8007050:	bf00      	nop
 8007052:	3740      	adds	r7, #64	; 0x40
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff f97c 	bl	8006364 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b09c      	sub	sp, #112	; 0x70
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0320 	and.w	r3, r3, #32
 800708c:	2b00      	cmp	r3, #0
 800708e:	d171      	bne.n	8007174 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007092:	2200      	movs	r2, #0
 8007094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80070b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e6      	bne.n	8007098 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	667b      	str	r3, [r7, #100]	; 0x64
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070ea:	647a      	str	r2, [r7, #68]	; 0x44
 80070ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e5      	bne.n	80070ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	623b      	str	r3, [r7, #32]
   return(result);
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007114:	663b      	str	r3, [r7, #96]	; 0x60
 8007116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3308      	adds	r3, #8
 800711c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800711e:	633a      	str	r2, [r7, #48]	; 0x30
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e5      	bne.n	80070fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800713a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800713e:	2b01      	cmp	r3, #1
 8007140:	d118      	bne.n	8007174 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0310 	bic.w	r3, r3, #16
 8007156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	617b      	str	r3, [r7, #20]
   return(result);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e6      	bne.n	8007142 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007176:	2200      	movs	r2, #0
 8007178:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800717a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d107      	bne.n	8007192 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007188:	4619      	mov	r1, r3
 800718a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800718c:	f7ff f908 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007190:	e002      	b.n	8007198 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007192:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007194:	f7f9 fcd2 	bl	8000b3c <HAL_UART_RxCpltCallback>
}
 8007198:	bf00      	nop
 800719a:	3770      	adds	r7, #112	; 0x70
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d109      	bne.n	80071d0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff f8e9 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071ce:	e002      	b.n	80071d6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7ff f8d1 	bl	8006378 <HAL_UART_RxHalfCpltCallback>
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007206:	2b80      	cmp	r3, #128	; 0x80
 8007208:	d109      	bne.n	800721e <UART_DMAError+0x40>
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b21      	cmp	r3, #33	; 0x21
 800720e:	d106      	bne.n	800721e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	f7ff fe29 	bl	8006e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d109      	bne.n	8007240 <UART_DMAError+0x62>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b22      	cmp	r3, #34	; 0x22
 8007230:	d106      	bne.n	8007240 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2200      	movs	r2, #0
 8007236:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800723a:	6978      	ldr	r0, [r7, #20]
 800723c:	f7ff fe59 	bl	8006ef2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007246:	f043 0210 	orr.w	r2, r3, #16
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007250:	6978      	ldr	r0, [r7, #20]
 8007252:	f7ff f89b 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007256:	bf00      	nop
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7ff f885 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b088      	sub	sp, #32
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	60bb      	str	r3, [r7, #8]
   return(result);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	61bb      	str	r3, [r7, #24]
 80072b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6979      	ldr	r1, [r7, #20]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	613b      	str	r3, [r7, #16]
   return(result);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e6      	bne.n	8007292 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff f83c 	bl	8006350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d8:	bf00      	nop
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_UARTEx_DisableFifoMode+0x16>
 800732e:	2302      	movs	r3, #2
 8007330:	e027      	b.n	8007382 <HAL_UARTEx_DisableFifoMode+0x66>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2224      	movs	r2, #36	; 0x24
 800733e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f022 0201 	bic.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007360:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e02d      	b.n	8007402 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2224      	movs	r2, #36	; 0x24
 80073b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0201 	bic.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f850 	bl	8007488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800741e:	2302      	movs	r3, #2
 8007420:	e02d      	b.n	800747e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2224      	movs	r2, #36	; 0x24
 800742e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0201 	bic.w	r2, r2, #1
 8007448:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f812 	bl	8007488 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007494:	2b00      	cmp	r3, #0
 8007496:	d108      	bne.n	80074aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074a8:	e031      	b.n	800750e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074aa:	2308      	movs	r3, #8
 80074ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074ae:	2308      	movs	r3, #8
 80074b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	0e5b      	lsrs	r3, r3, #25
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	0f5b      	lsrs	r3, r3, #29
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074d2:	7bbb      	ldrb	r3, [r7, #14]
 80074d4:	7b3a      	ldrb	r2, [r7, #12]
 80074d6:	4911      	ldr	r1, [pc, #68]	; (800751c <UARTEx_SetNbDataToProcess+0x94>)
 80074d8:	5c8a      	ldrb	r2, [r1, r2]
 80074da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074de:	7b3a      	ldrb	r2, [r7, #12]
 80074e0:	490f      	ldr	r1, [pc, #60]	; (8007520 <UARTEx_SetNbDataToProcess+0x98>)
 80074e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	7b7a      	ldrb	r2, [r7, #13]
 80074f4:	4909      	ldr	r1, [pc, #36]	; (800751c <UARTEx_SetNbDataToProcess+0x94>)
 80074f6:	5c8a      	ldrb	r2, [r1, r2]
 80074f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074fc:	7b7a      	ldrb	r2, [r7, #13]
 80074fe:	4908      	ldr	r1, [pc, #32]	; (8007520 <UARTEx_SetNbDataToProcess+0x98>)
 8007500:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007502:	fb93 f3f2 	sdiv	r3, r3, r2
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800750e:	bf00      	nop
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	08008988 	.word	0x08008988
 8007520:	08008990 	.word	0x08008990

08007524 <rand>:
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <rand+0x5c>)
 8007526:	b510      	push	{r4, lr}
 8007528:	681c      	ldr	r4, [r3, #0]
 800752a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800752c:	b9b3      	cbnz	r3, 800755c <rand+0x38>
 800752e:	2018      	movs	r0, #24
 8007530:	f000 fa58 	bl	80079e4 <malloc>
 8007534:	4602      	mov	r2, r0
 8007536:	6320      	str	r0, [r4, #48]	; 0x30
 8007538:	b920      	cbnz	r0, 8007544 <rand+0x20>
 800753a:	4b12      	ldr	r3, [pc, #72]	; (8007584 <rand+0x60>)
 800753c:	4812      	ldr	r0, [pc, #72]	; (8007588 <rand+0x64>)
 800753e:	2152      	movs	r1, #82	; 0x52
 8007540:	f000 f9e6 	bl	8007910 <__assert_func>
 8007544:	4911      	ldr	r1, [pc, #68]	; (800758c <rand+0x68>)
 8007546:	4b12      	ldr	r3, [pc, #72]	; (8007590 <rand+0x6c>)
 8007548:	e9c0 1300 	strd	r1, r3, [r0]
 800754c:	4b11      	ldr	r3, [pc, #68]	; (8007594 <rand+0x70>)
 800754e:	6083      	str	r3, [r0, #8]
 8007550:	230b      	movs	r3, #11
 8007552:	8183      	strh	r3, [r0, #12]
 8007554:	2100      	movs	r1, #0
 8007556:	2001      	movs	r0, #1
 8007558:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800755c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800755e:	480e      	ldr	r0, [pc, #56]	; (8007598 <rand+0x74>)
 8007560:	690b      	ldr	r3, [r1, #16]
 8007562:	694c      	ldr	r4, [r1, #20]
 8007564:	4a0d      	ldr	r2, [pc, #52]	; (800759c <rand+0x78>)
 8007566:	4358      	muls	r0, r3
 8007568:	fb02 0004 	mla	r0, r2, r4, r0
 800756c:	fba3 3202 	umull	r3, r2, r3, r2
 8007570:	3301      	adds	r3, #1
 8007572:	eb40 0002 	adc.w	r0, r0, r2
 8007576:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800757a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800757e:	bd10      	pop	{r4, pc}
 8007580:	20000064 	.word	0x20000064
 8007584:	08008998 	.word	0x08008998
 8007588:	080089af 	.word	0x080089af
 800758c:	abcd330e 	.word	0xabcd330e
 8007590:	e66d1234 	.word	0xe66d1234
 8007594:	0005deec 	.word	0x0005deec
 8007598:	5851f42d 	.word	0x5851f42d
 800759c:	4c957f2d 	.word	0x4c957f2d

080075a0 <std>:
 80075a0:	2300      	movs	r3, #0
 80075a2:	b510      	push	{r4, lr}
 80075a4:	4604      	mov	r4, r0
 80075a6:	e9c0 3300 	strd	r3, r3, [r0]
 80075aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075ae:	6083      	str	r3, [r0, #8]
 80075b0:	8181      	strh	r1, [r0, #12]
 80075b2:	6643      	str	r3, [r0, #100]	; 0x64
 80075b4:	81c2      	strh	r2, [r0, #14]
 80075b6:	6183      	str	r3, [r0, #24]
 80075b8:	4619      	mov	r1, r3
 80075ba:	2208      	movs	r2, #8
 80075bc:	305c      	adds	r0, #92	; 0x5c
 80075be:	f000 f914 	bl	80077ea <memset>
 80075c2:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <std+0x58>)
 80075c4:	6263      	str	r3, [r4, #36]	; 0x24
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <std+0x5c>)
 80075c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <std+0x60>)
 80075cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075ce:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <std+0x64>)
 80075d0:	6323      	str	r3, [r4, #48]	; 0x30
 80075d2:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <std+0x68>)
 80075d4:	6224      	str	r4, [r4, #32]
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d006      	beq.n	80075e8 <std+0x48>
 80075da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80075de:	4294      	cmp	r4, r2
 80075e0:	d002      	beq.n	80075e8 <std+0x48>
 80075e2:	33d0      	adds	r3, #208	; 0xd0
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d105      	bne.n	80075f4 <std+0x54>
 80075e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f0:	f000 b98a 	b.w	8007908 <__retarget_lock_init_recursive>
 80075f4:	bd10      	pop	{r4, pc}
 80075f6:	bf00      	nop
 80075f8:	08007765 	.word	0x08007765
 80075fc:	08007787 	.word	0x08007787
 8007600:	080077bf 	.word	0x080077bf
 8007604:	080077e3 	.word	0x080077e3
 8007608:	200003e4 	.word	0x200003e4

0800760c <stdio_exit_handler>:
 800760c:	4a02      	ldr	r2, [pc, #8]	; (8007618 <stdio_exit_handler+0xc>)
 800760e:	4903      	ldr	r1, [pc, #12]	; (800761c <stdio_exit_handler+0x10>)
 8007610:	4803      	ldr	r0, [pc, #12]	; (8007620 <stdio_exit_handler+0x14>)
 8007612:	f000 b869 	b.w	80076e8 <_fwalk_sglue>
 8007616:	bf00      	nop
 8007618:	2000000c 	.word	0x2000000c
 800761c:	08008229 	.word	0x08008229
 8007620:	20000018 	.word	0x20000018

08007624 <cleanup_stdio>:
 8007624:	6841      	ldr	r1, [r0, #4]
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <cleanup_stdio+0x34>)
 8007628:	4299      	cmp	r1, r3
 800762a:	b510      	push	{r4, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	d001      	beq.n	8007634 <cleanup_stdio+0x10>
 8007630:	f000 fdfa 	bl	8008228 <_fflush_r>
 8007634:	68a1      	ldr	r1, [r4, #8]
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <cleanup_stdio+0x38>)
 8007638:	4299      	cmp	r1, r3
 800763a:	d002      	beq.n	8007642 <cleanup_stdio+0x1e>
 800763c:	4620      	mov	r0, r4
 800763e:	f000 fdf3 	bl	8008228 <_fflush_r>
 8007642:	68e1      	ldr	r1, [r4, #12]
 8007644:	4b06      	ldr	r3, [pc, #24]	; (8007660 <cleanup_stdio+0x3c>)
 8007646:	4299      	cmp	r1, r3
 8007648:	d004      	beq.n	8007654 <cleanup_stdio+0x30>
 800764a:	4620      	mov	r0, r4
 800764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007650:	f000 bdea 	b.w	8008228 <_fflush_r>
 8007654:	bd10      	pop	{r4, pc}
 8007656:	bf00      	nop
 8007658:	200003e4 	.word	0x200003e4
 800765c:	2000044c 	.word	0x2000044c
 8007660:	200004b4 	.word	0x200004b4

08007664 <global_stdio_init.part.0>:
 8007664:	b510      	push	{r4, lr}
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <global_stdio_init.part.0+0x30>)
 8007668:	4c0b      	ldr	r4, [pc, #44]	; (8007698 <global_stdio_init.part.0+0x34>)
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <global_stdio_init.part.0+0x38>)
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	4620      	mov	r0, r4
 8007670:	2200      	movs	r2, #0
 8007672:	2104      	movs	r1, #4
 8007674:	f7ff ff94 	bl	80075a0 <std>
 8007678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800767c:	2201      	movs	r2, #1
 800767e:	2109      	movs	r1, #9
 8007680:	f7ff ff8e 	bl	80075a0 <std>
 8007684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007688:	2202      	movs	r2, #2
 800768a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768e:	2112      	movs	r1, #18
 8007690:	f7ff bf86 	b.w	80075a0 <std>
 8007694:	2000051c 	.word	0x2000051c
 8007698:	200003e4 	.word	0x200003e4
 800769c:	0800760d 	.word	0x0800760d

080076a0 <__sfp_lock_acquire>:
 80076a0:	4801      	ldr	r0, [pc, #4]	; (80076a8 <__sfp_lock_acquire+0x8>)
 80076a2:	f000 b932 	b.w	800790a <__retarget_lock_acquire_recursive>
 80076a6:	bf00      	nop
 80076a8:	20000525 	.word	0x20000525

080076ac <__sfp_lock_release>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__sfp_lock_release+0x8>)
 80076ae:	f000 b92d 	b.w	800790c <__retarget_lock_release_recursive>
 80076b2:	bf00      	nop
 80076b4:	20000525 	.word	0x20000525

080076b8 <__sinit>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	4604      	mov	r4, r0
 80076bc:	f7ff fff0 	bl	80076a0 <__sfp_lock_acquire>
 80076c0:	6a23      	ldr	r3, [r4, #32]
 80076c2:	b11b      	cbz	r3, 80076cc <__sinit+0x14>
 80076c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c8:	f7ff bff0 	b.w	80076ac <__sfp_lock_release>
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <__sinit+0x28>)
 80076ce:	6223      	str	r3, [r4, #32]
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <__sinit+0x2c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d1f5      	bne.n	80076c4 <__sinit+0xc>
 80076d8:	f7ff ffc4 	bl	8007664 <global_stdio_init.part.0>
 80076dc:	e7f2      	b.n	80076c4 <__sinit+0xc>
 80076de:	bf00      	nop
 80076e0:	08007625 	.word	0x08007625
 80076e4:	2000051c 	.word	0x2000051c

080076e8 <_fwalk_sglue>:
 80076e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	4607      	mov	r7, r0
 80076ee:	4688      	mov	r8, r1
 80076f0:	4614      	mov	r4, r2
 80076f2:	2600      	movs	r6, #0
 80076f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076f8:	f1b9 0901 	subs.w	r9, r9, #1
 80076fc:	d505      	bpl.n	800770a <_fwalk_sglue+0x22>
 80076fe:	6824      	ldr	r4, [r4, #0]
 8007700:	2c00      	cmp	r4, #0
 8007702:	d1f7      	bne.n	80076f4 <_fwalk_sglue+0xc>
 8007704:	4630      	mov	r0, r6
 8007706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d907      	bls.n	8007720 <_fwalk_sglue+0x38>
 8007710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007714:	3301      	adds	r3, #1
 8007716:	d003      	beq.n	8007720 <_fwalk_sglue+0x38>
 8007718:	4629      	mov	r1, r5
 800771a:	4638      	mov	r0, r7
 800771c:	47c0      	blx	r8
 800771e:	4306      	orrs	r6, r0
 8007720:	3568      	adds	r5, #104	; 0x68
 8007722:	e7e9      	b.n	80076f8 <_fwalk_sglue+0x10>

08007724 <siprintf>:
 8007724:	b40e      	push	{r1, r2, r3}
 8007726:	b500      	push	{lr}
 8007728:	b09c      	sub	sp, #112	; 0x70
 800772a:	ab1d      	add	r3, sp, #116	; 0x74
 800772c:	9002      	str	r0, [sp, #8]
 800772e:	9006      	str	r0, [sp, #24]
 8007730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007734:	4809      	ldr	r0, [pc, #36]	; (800775c <siprintf+0x38>)
 8007736:	9107      	str	r1, [sp, #28]
 8007738:	9104      	str	r1, [sp, #16]
 800773a:	4909      	ldr	r1, [pc, #36]	; (8007760 <siprintf+0x3c>)
 800773c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007740:	9105      	str	r1, [sp, #20]
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	a902      	add	r1, sp, #8
 8007748:	f000 fa5a 	bl	8007c00 <_svfiprintf_r>
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	2200      	movs	r2, #0
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	b01c      	add	sp, #112	; 0x70
 8007754:	f85d eb04 	ldr.w	lr, [sp], #4
 8007758:	b003      	add	sp, #12
 800775a:	4770      	bx	lr
 800775c:	20000064 	.word	0x20000064
 8007760:	ffff0208 	.word	0xffff0208

08007764 <__sread>:
 8007764:	b510      	push	{r4, lr}
 8007766:	460c      	mov	r4, r1
 8007768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776c:	f000 f87e 	bl	800786c <_read_r>
 8007770:	2800      	cmp	r0, #0
 8007772:	bfab      	itete	ge
 8007774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007776:	89a3      	ldrhlt	r3, [r4, #12]
 8007778:	181b      	addge	r3, r3, r0
 800777a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800777e:	bfac      	ite	ge
 8007780:	6563      	strge	r3, [r4, #84]	; 0x54
 8007782:	81a3      	strhlt	r3, [r4, #12]
 8007784:	bd10      	pop	{r4, pc}

08007786 <__swrite>:
 8007786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778a:	461f      	mov	r7, r3
 800778c:	898b      	ldrh	r3, [r1, #12]
 800778e:	05db      	lsls	r3, r3, #23
 8007790:	4605      	mov	r5, r0
 8007792:	460c      	mov	r4, r1
 8007794:	4616      	mov	r6, r2
 8007796:	d505      	bpl.n	80077a4 <__swrite+0x1e>
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	2302      	movs	r3, #2
 800779e:	2200      	movs	r2, #0
 80077a0:	f000 f852 	bl	8007848 <_lseek_r>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ae:	81a3      	strh	r3, [r4, #12]
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	4628      	mov	r0, r5
 80077b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ba:	f000 b869 	b.w	8007890 <_write_r>

080077be <__sseek>:
 80077be:	b510      	push	{r4, lr}
 80077c0:	460c      	mov	r4, r1
 80077c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c6:	f000 f83f 	bl	8007848 <_lseek_r>
 80077ca:	1c43      	adds	r3, r0, #1
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	bf15      	itete	ne
 80077d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80077d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077da:	81a3      	strheq	r3, [r4, #12]
 80077dc:	bf18      	it	ne
 80077de:	81a3      	strhne	r3, [r4, #12]
 80077e0:	bd10      	pop	{r4, pc}

080077e2 <__sclose>:
 80077e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e6:	f000 b81f 	b.w	8007828 <_close_r>

080077ea <memset>:
 80077ea:	4402      	add	r2, r0
 80077ec:	4603      	mov	r3, r0
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d100      	bne.n	80077f4 <memset+0xa>
 80077f2:	4770      	bx	lr
 80077f4:	f803 1b01 	strb.w	r1, [r3], #1
 80077f8:	e7f9      	b.n	80077ee <memset+0x4>

080077fa <strstr>:
 80077fa:	780a      	ldrb	r2, [r1, #0]
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	b96a      	cbnz	r2, 800781c <strstr+0x22>
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	429a      	cmp	r2, r3
 8007804:	d109      	bne.n	800781a <strstr+0x20>
 8007806:	460c      	mov	r4, r1
 8007808:	4605      	mov	r5, r0
 800780a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f6      	beq.n	8007800 <strstr+0x6>
 8007812:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007816:	429e      	cmp	r6, r3
 8007818:	d0f7      	beq.n	800780a <strstr+0x10>
 800781a:	3001      	adds	r0, #1
 800781c:	7803      	ldrb	r3, [r0, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1ef      	bne.n	8007802 <strstr+0x8>
 8007822:	4618      	mov	r0, r3
 8007824:	e7ec      	b.n	8007800 <strstr+0x6>
	...

08007828 <_close_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	; (8007844 <_close_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7f9 fdd5 	bl	80013e2 <_close>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_close_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_close_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20000520 	.word	0x20000520

08007848 <_lseek_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	; (8007868 <_lseek_r+0x20>)
 800784c:	4604      	mov	r4, r0
 800784e:	4608      	mov	r0, r1
 8007850:	4611      	mov	r1, r2
 8007852:	2200      	movs	r2, #0
 8007854:	602a      	str	r2, [r5, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	f7f9 fdea 	bl	8001430 <_lseek>
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	d102      	bne.n	8007866 <_lseek_r+0x1e>
 8007860:	682b      	ldr	r3, [r5, #0]
 8007862:	b103      	cbz	r3, 8007866 <_lseek_r+0x1e>
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	20000520 	.word	0x20000520

0800786c <_read_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	; (800788c <_read_r+0x20>)
 8007870:	4604      	mov	r4, r0
 8007872:	4608      	mov	r0, r1
 8007874:	4611      	mov	r1, r2
 8007876:	2200      	movs	r2, #0
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f7f9 fd78 	bl	8001370 <_read>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_read_r+0x1e>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_read_r+0x1e>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20000520 	.word	0x20000520

08007890 <_write_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_write_r+0x20>)
 8007894:	4604      	mov	r4, r0
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	2200      	movs	r2, #0
 800789c:	602a      	str	r2, [r5, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f7f9 fd83 	bl	80013aa <_write>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_write_r+0x1e>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_write_r+0x1e>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	20000520 	.word	0x20000520

080078b4 <__errno>:
 80078b4:	4b01      	ldr	r3, [pc, #4]	; (80078bc <__errno+0x8>)
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000064 	.word	0x20000064

080078c0 <__libc_init_array>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	4d0d      	ldr	r5, [pc, #52]	; (80078f8 <__libc_init_array+0x38>)
 80078c4:	4c0d      	ldr	r4, [pc, #52]	; (80078fc <__libc_init_array+0x3c>)
 80078c6:	1b64      	subs	r4, r4, r5
 80078c8:	10a4      	asrs	r4, r4, #2
 80078ca:	2600      	movs	r6, #0
 80078cc:	42a6      	cmp	r6, r4
 80078ce:	d109      	bne.n	80078e4 <__libc_init_array+0x24>
 80078d0:	4d0b      	ldr	r5, [pc, #44]	; (8007900 <__libc_init_array+0x40>)
 80078d2:	4c0c      	ldr	r4, [pc, #48]	; (8007904 <__libc_init_array+0x44>)
 80078d4:	f000 fffa 	bl	80088cc <_init>
 80078d8:	1b64      	subs	r4, r4, r5
 80078da:	10a4      	asrs	r4, r4, #2
 80078dc:	2600      	movs	r6, #0
 80078de:	42a6      	cmp	r6, r4
 80078e0:	d105      	bne.n	80078ee <__libc_init_array+0x2e>
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e8:	4798      	blx	r3
 80078ea:	3601      	adds	r6, #1
 80078ec:	e7ee      	b.n	80078cc <__libc_init_array+0xc>
 80078ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f2:	4798      	blx	r3
 80078f4:	3601      	adds	r6, #1
 80078f6:	e7f2      	b.n	80078de <__libc_init_array+0x1e>
 80078f8:	08008a80 	.word	0x08008a80
 80078fc:	08008a80 	.word	0x08008a80
 8007900:	08008a80 	.word	0x08008a80
 8007904:	08008a84 	.word	0x08008a84

08007908 <__retarget_lock_init_recursive>:
 8007908:	4770      	bx	lr

0800790a <__retarget_lock_acquire_recursive>:
 800790a:	4770      	bx	lr

0800790c <__retarget_lock_release_recursive>:
 800790c:	4770      	bx	lr
	...

08007910 <__assert_func>:
 8007910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007912:	4614      	mov	r4, r2
 8007914:	461a      	mov	r2, r3
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <__assert_func+0x2c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4605      	mov	r5, r0
 800791c:	68d8      	ldr	r0, [r3, #12]
 800791e:	b14c      	cbz	r4, 8007934 <__assert_func+0x24>
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <__assert_func+0x30>)
 8007922:	9100      	str	r1, [sp, #0]
 8007924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007928:	4906      	ldr	r1, [pc, #24]	; (8007944 <__assert_func+0x34>)
 800792a:	462b      	mov	r3, r5
 800792c:	f000 fca4 	bl	8008278 <fiprintf>
 8007930:	f000 fcec 	bl	800830c <abort>
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <__assert_func+0x38>)
 8007936:	461c      	mov	r4, r3
 8007938:	e7f3      	b.n	8007922 <__assert_func+0x12>
 800793a:	bf00      	nop
 800793c:	20000064 	.word	0x20000064
 8007940:	08008a07 	.word	0x08008a07
 8007944:	08008a14 	.word	0x08008a14
 8007948:	08008a42 	.word	0x08008a42

0800794c <_free_r>:
 800794c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800794e:	2900      	cmp	r1, #0
 8007950:	d044      	beq.n	80079dc <_free_r+0x90>
 8007952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007956:	9001      	str	r0, [sp, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f1a1 0404 	sub.w	r4, r1, #4
 800795e:	bfb8      	it	lt
 8007960:	18e4      	addlt	r4, r4, r3
 8007962:	f000 f8e7 	bl	8007b34 <__malloc_lock>
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <_free_r+0x94>)
 8007968:	9801      	ldr	r0, [sp, #4]
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	b933      	cbnz	r3, 800797c <_free_r+0x30>
 800796e:	6063      	str	r3, [r4, #4]
 8007970:	6014      	str	r4, [r2, #0]
 8007972:	b003      	add	sp, #12
 8007974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007978:	f000 b8e2 	b.w	8007b40 <__malloc_unlock>
 800797c:	42a3      	cmp	r3, r4
 800797e:	d908      	bls.n	8007992 <_free_r+0x46>
 8007980:	6825      	ldr	r5, [r4, #0]
 8007982:	1961      	adds	r1, r4, r5
 8007984:	428b      	cmp	r3, r1
 8007986:	bf01      	itttt	eq
 8007988:	6819      	ldreq	r1, [r3, #0]
 800798a:	685b      	ldreq	r3, [r3, #4]
 800798c:	1949      	addeq	r1, r1, r5
 800798e:	6021      	streq	r1, [r4, #0]
 8007990:	e7ed      	b.n	800796e <_free_r+0x22>
 8007992:	461a      	mov	r2, r3
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b10b      	cbz	r3, 800799c <_free_r+0x50>
 8007998:	42a3      	cmp	r3, r4
 800799a:	d9fa      	bls.n	8007992 <_free_r+0x46>
 800799c:	6811      	ldr	r1, [r2, #0]
 800799e:	1855      	adds	r5, r2, r1
 80079a0:	42a5      	cmp	r5, r4
 80079a2:	d10b      	bne.n	80079bc <_free_r+0x70>
 80079a4:	6824      	ldr	r4, [r4, #0]
 80079a6:	4421      	add	r1, r4
 80079a8:	1854      	adds	r4, r2, r1
 80079aa:	42a3      	cmp	r3, r4
 80079ac:	6011      	str	r1, [r2, #0]
 80079ae:	d1e0      	bne.n	8007972 <_free_r+0x26>
 80079b0:	681c      	ldr	r4, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	6053      	str	r3, [r2, #4]
 80079b6:	440c      	add	r4, r1
 80079b8:	6014      	str	r4, [r2, #0]
 80079ba:	e7da      	b.n	8007972 <_free_r+0x26>
 80079bc:	d902      	bls.n	80079c4 <_free_r+0x78>
 80079be:	230c      	movs	r3, #12
 80079c0:	6003      	str	r3, [r0, #0]
 80079c2:	e7d6      	b.n	8007972 <_free_r+0x26>
 80079c4:	6825      	ldr	r5, [r4, #0]
 80079c6:	1961      	adds	r1, r4, r5
 80079c8:	428b      	cmp	r3, r1
 80079ca:	bf04      	itt	eq
 80079cc:	6819      	ldreq	r1, [r3, #0]
 80079ce:	685b      	ldreq	r3, [r3, #4]
 80079d0:	6063      	str	r3, [r4, #4]
 80079d2:	bf04      	itt	eq
 80079d4:	1949      	addeq	r1, r1, r5
 80079d6:	6021      	streq	r1, [r4, #0]
 80079d8:	6054      	str	r4, [r2, #4]
 80079da:	e7ca      	b.n	8007972 <_free_r+0x26>
 80079dc:	b003      	add	sp, #12
 80079de:	bd30      	pop	{r4, r5, pc}
 80079e0:	20000528 	.word	0x20000528

080079e4 <malloc>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <malloc+0xc>)
 80079e6:	4601      	mov	r1, r0
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f000 b823 	b.w	8007a34 <_malloc_r>
 80079ee:	bf00      	nop
 80079f0:	20000064 	.word	0x20000064

080079f4 <sbrk_aligned>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	4e0e      	ldr	r6, [pc, #56]	; (8007a30 <sbrk_aligned+0x3c>)
 80079f8:	460c      	mov	r4, r1
 80079fa:	6831      	ldr	r1, [r6, #0]
 80079fc:	4605      	mov	r5, r0
 80079fe:	b911      	cbnz	r1, 8007a06 <sbrk_aligned+0x12>
 8007a00:	f000 fc66 	bl	80082d0 <_sbrk_r>
 8007a04:	6030      	str	r0, [r6, #0]
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 fc61 	bl	80082d0 <_sbrk_r>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d00a      	beq.n	8007a28 <sbrk_aligned+0x34>
 8007a12:	1cc4      	adds	r4, r0, #3
 8007a14:	f024 0403 	bic.w	r4, r4, #3
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d007      	beq.n	8007a2c <sbrk_aligned+0x38>
 8007a1c:	1a21      	subs	r1, r4, r0
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 fc56 	bl	80082d0 <_sbrk_r>
 8007a24:	3001      	adds	r0, #1
 8007a26:	d101      	bne.n	8007a2c <sbrk_aligned+0x38>
 8007a28:	f04f 34ff 	mov.w	r4, #4294967295
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	2000052c 	.word	0x2000052c

08007a34 <_malloc_r>:
 8007a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a38:	1ccd      	adds	r5, r1, #3
 8007a3a:	f025 0503 	bic.w	r5, r5, #3
 8007a3e:	3508      	adds	r5, #8
 8007a40:	2d0c      	cmp	r5, #12
 8007a42:	bf38      	it	cc
 8007a44:	250c      	movcc	r5, #12
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	4607      	mov	r7, r0
 8007a4a:	db01      	blt.n	8007a50 <_malloc_r+0x1c>
 8007a4c:	42a9      	cmp	r1, r5
 8007a4e:	d905      	bls.n	8007a5c <_malloc_r+0x28>
 8007a50:	230c      	movs	r3, #12
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	2600      	movs	r6, #0
 8007a56:	4630      	mov	r0, r6
 8007a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b30 <_malloc_r+0xfc>
 8007a60:	f000 f868 	bl	8007b34 <__malloc_lock>
 8007a64:	f8d8 3000 	ldr.w	r3, [r8]
 8007a68:	461c      	mov	r4, r3
 8007a6a:	bb5c      	cbnz	r4, 8007ac4 <_malloc_r+0x90>
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4638      	mov	r0, r7
 8007a70:	f7ff ffc0 	bl	80079f4 <sbrk_aligned>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	4604      	mov	r4, r0
 8007a78:	d155      	bne.n	8007b26 <_malloc_r+0xf2>
 8007a7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a7e:	4626      	mov	r6, r4
 8007a80:	2e00      	cmp	r6, #0
 8007a82:	d145      	bne.n	8007b10 <_malloc_r+0xdc>
 8007a84:	2c00      	cmp	r4, #0
 8007a86:	d048      	beq.n	8007b1a <_malloc_r+0xe6>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	eb04 0903 	add.w	r9, r4, r3
 8007a92:	f000 fc1d 	bl	80082d0 <_sbrk_r>
 8007a96:	4581      	cmp	r9, r0
 8007a98:	d13f      	bne.n	8007b1a <_malloc_r+0xe6>
 8007a9a:	6821      	ldr	r1, [r4, #0]
 8007a9c:	1a6d      	subs	r5, r5, r1
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7ff ffa7 	bl	80079f4 <sbrk_aligned>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d037      	beq.n	8007b1a <_malloc_r+0xe6>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	442b      	add	r3, r5
 8007aae:	6023      	str	r3, [r4, #0]
 8007ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d038      	beq.n	8007b2a <_malloc_r+0xf6>
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	42a2      	cmp	r2, r4
 8007abc:	d12b      	bne.n	8007b16 <_malloc_r+0xe2>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	605a      	str	r2, [r3, #4]
 8007ac2:	e00f      	b.n	8007ae4 <_malloc_r+0xb0>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	1b52      	subs	r2, r2, r5
 8007ac8:	d41f      	bmi.n	8007b0a <_malloc_r+0xd6>
 8007aca:	2a0b      	cmp	r2, #11
 8007acc:	d917      	bls.n	8007afe <_malloc_r+0xca>
 8007ace:	1961      	adds	r1, r4, r5
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	6025      	str	r5, [r4, #0]
 8007ad4:	bf18      	it	ne
 8007ad6:	6059      	strne	r1, [r3, #4]
 8007ad8:	6863      	ldr	r3, [r4, #4]
 8007ada:	bf08      	it	eq
 8007adc:	f8c8 1000 	streq.w	r1, [r8]
 8007ae0:	5162      	str	r2, [r4, r5]
 8007ae2:	604b      	str	r3, [r1, #4]
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f104 060b 	add.w	r6, r4, #11
 8007aea:	f000 f829 	bl	8007b40 <__malloc_unlock>
 8007aee:	f026 0607 	bic.w	r6, r6, #7
 8007af2:	1d23      	adds	r3, r4, #4
 8007af4:	1af2      	subs	r2, r6, r3
 8007af6:	d0ae      	beq.n	8007a56 <_malloc_r+0x22>
 8007af8:	1b9b      	subs	r3, r3, r6
 8007afa:	50a3      	str	r3, [r4, r2]
 8007afc:	e7ab      	b.n	8007a56 <_malloc_r+0x22>
 8007afe:	42a3      	cmp	r3, r4
 8007b00:	6862      	ldr	r2, [r4, #4]
 8007b02:	d1dd      	bne.n	8007ac0 <_malloc_r+0x8c>
 8007b04:	f8c8 2000 	str.w	r2, [r8]
 8007b08:	e7ec      	b.n	8007ae4 <_malloc_r+0xb0>
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	6864      	ldr	r4, [r4, #4]
 8007b0e:	e7ac      	b.n	8007a6a <_malloc_r+0x36>
 8007b10:	4634      	mov	r4, r6
 8007b12:	6876      	ldr	r6, [r6, #4]
 8007b14:	e7b4      	b.n	8007a80 <_malloc_r+0x4c>
 8007b16:	4613      	mov	r3, r2
 8007b18:	e7cc      	b.n	8007ab4 <_malloc_r+0x80>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	4638      	mov	r0, r7
 8007b20:	f000 f80e 	bl	8007b40 <__malloc_unlock>
 8007b24:	e797      	b.n	8007a56 <_malloc_r+0x22>
 8007b26:	6025      	str	r5, [r4, #0]
 8007b28:	e7dc      	b.n	8007ae4 <_malloc_r+0xb0>
 8007b2a:	605b      	str	r3, [r3, #4]
 8007b2c:	deff      	udf	#255	; 0xff
 8007b2e:	bf00      	nop
 8007b30:	20000528 	.word	0x20000528

08007b34 <__malloc_lock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_lock+0x8>)
 8007b36:	f7ff bee8 	b.w	800790a <__retarget_lock_acquire_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20000524 	.word	0x20000524

08007b40 <__malloc_unlock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__malloc_unlock+0x8>)
 8007b42:	f7ff bee3 	b.w	800790c <__retarget_lock_release_recursive>
 8007b46:	bf00      	nop
 8007b48:	20000524 	.word	0x20000524

08007b4c <__ssputs_r>:
 8007b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	688e      	ldr	r6, [r1, #8]
 8007b52:	461f      	mov	r7, r3
 8007b54:	42be      	cmp	r6, r7
 8007b56:	680b      	ldr	r3, [r1, #0]
 8007b58:	4682      	mov	sl, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4690      	mov	r8, r2
 8007b5e:	d82c      	bhi.n	8007bba <__ssputs_r+0x6e>
 8007b60:	898a      	ldrh	r2, [r1, #12]
 8007b62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b66:	d026      	beq.n	8007bb6 <__ssputs_r+0x6a>
 8007b68:	6965      	ldr	r5, [r4, #20]
 8007b6a:	6909      	ldr	r1, [r1, #16]
 8007b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b70:	eba3 0901 	sub.w	r9, r3, r1
 8007b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b78:	1c7b      	adds	r3, r7, #1
 8007b7a:	444b      	add	r3, r9
 8007b7c:	106d      	asrs	r5, r5, #1
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	bf38      	it	cc
 8007b82:	461d      	movcc	r5, r3
 8007b84:	0553      	lsls	r3, r2, #21
 8007b86:	d527      	bpl.n	8007bd8 <__ssputs_r+0x8c>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7ff ff53 	bl	8007a34 <_malloc_r>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	b360      	cbz	r0, 8007bec <__ssputs_r+0xa0>
 8007b92:	6921      	ldr	r1, [r4, #16]
 8007b94:	464a      	mov	r2, r9
 8007b96:	f000 fbab 	bl	80082f0 <memcpy>
 8007b9a:	89a3      	ldrh	r3, [r4, #12]
 8007b9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	6126      	str	r6, [r4, #16]
 8007ba8:	6165      	str	r5, [r4, #20]
 8007baa:	444e      	add	r6, r9
 8007bac:	eba5 0509 	sub.w	r5, r5, r9
 8007bb0:	6026      	str	r6, [r4, #0]
 8007bb2:	60a5      	str	r5, [r4, #8]
 8007bb4:	463e      	mov	r6, r7
 8007bb6:	42be      	cmp	r6, r7
 8007bb8:	d900      	bls.n	8007bbc <__ssputs_r+0x70>
 8007bba:	463e      	mov	r6, r7
 8007bbc:	6820      	ldr	r0, [r4, #0]
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	f000 fb6b 	bl	800829c <memmove>
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	1b9b      	subs	r3, r3, r6
 8007bca:	60a3      	str	r3, [r4, #8]
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	4433      	add	r3, r6
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	462a      	mov	r2, r5
 8007bda:	f000 fb9e 	bl	800831a <_realloc_r>
 8007bde:	4606      	mov	r6, r0
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d1e0      	bne.n	8007ba6 <__ssputs_r+0x5a>
 8007be4:	6921      	ldr	r1, [r4, #16]
 8007be6:	4650      	mov	r0, sl
 8007be8:	f7ff feb0 	bl	800794c <_free_r>
 8007bec:	230c      	movs	r3, #12
 8007bee:	f8ca 3000 	str.w	r3, [sl]
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfe:	e7e9      	b.n	8007bd4 <__ssputs_r+0x88>

08007c00 <_svfiprintf_r>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	4698      	mov	r8, r3
 8007c06:	898b      	ldrh	r3, [r1, #12]
 8007c08:	061b      	lsls	r3, r3, #24
 8007c0a:	b09d      	sub	sp, #116	; 0x74
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	460d      	mov	r5, r1
 8007c10:	4614      	mov	r4, r2
 8007c12:	d50e      	bpl.n	8007c32 <_svfiprintf_r+0x32>
 8007c14:	690b      	ldr	r3, [r1, #16]
 8007c16:	b963      	cbnz	r3, 8007c32 <_svfiprintf_r+0x32>
 8007c18:	2140      	movs	r1, #64	; 0x40
 8007c1a:	f7ff ff0b 	bl	8007a34 <_malloc_r>
 8007c1e:	6028      	str	r0, [r5, #0]
 8007c20:	6128      	str	r0, [r5, #16]
 8007c22:	b920      	cbnz	r0, 8007c2e <_svfiprintf_r+0x2e>
 8007c24:	230c      	movs	r3, #12
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e0d0      	b.n	8007dd0 <_svfiprintf_r+0x1d0>
 8007c2e:	2340      	movs	r3, #64	; 0x40
 8007c30:	616b      	str	r3, [r5, #20]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	2320      	movs	r3, #32
 8007c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c40:	2330      	movs	r3, #48	; 0x30
 8007c42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007de8 <_svfiprintf_r+0x1e8>
 8007c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c4a:	f04f 0901 	mov.w	r9, #1
 8007c4e:	4623      	mov	r3, r4
 8007c50:	469a      	mov	sl, r3
 8007c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c56:	b10a      	cbz	r2, 8007c5c <_svfiprintf_r+0x5c>
 8007c58:	2a25      	cmp	r2, #37	; 0x25
 8007c5a:	d1f9      	bne.n	8007c50 <_svfiprintf_r+0x50>
 8007c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c60:	d00b      	beq.n	8007c7a <_svfiprintf_r+0x7a>
 8007c62:	465b      	mov	r3, fp
 8007c64:	4622      	mov	r2, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	4638      	mov	r0, r7
 8007c6a:	f7ff ff6f 	bl	8007b4c <__ssputs_r>
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f000 80a9 	beq.w	8007dc6 <_svfiprintf_r+0x1c6>
 8007c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c76:	445a      	add	r2, fp
 8007c78:	9209      	str	r2, [sp, #36]	; 0x24
 8007c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80a1 	beq.w	8007dc6 <_svfiprintf_r+0x1c6>
 8007c84:	2300      	movs	r3, #0
 8007c86:	f04f 32ff 	mov.w	r2, #4294967295
 8007c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c8e:	f10a 0a01 	add.w	sl, sl, #1
 8007c92:	9304      	str	r3, [sp, #16]
 8007c94:	9307      	str	r3, [sp, #28]
 8007c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c9c:	4654      	mov	r4, sl
 8007c9e:	2205      	movs	r2, #5
 8007ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca4:	4850      	ldr	r0, [pc, #320]	; (8007de8 <_svfiprintf_r+0x1e8>)
 8007ca6:	f7f8 fac3 	bl	8000230 <memchr>
 8007caa:	9a04      	ldr	r2, [sp, #16]
 8007cac:	b9d8      	cbnz	r0, 8007ce6 <_svfiprintf_r+0xe6>
 8007cae:	06d0      	lsls	r0, r2, #27
 8007cb0:	bf44      	itt	mi
 8007cb2:	2320      	movmi	r3, #32
 8007cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cb8:	0711      	lsls	r1, r2, #28
 8007cba:	bf44      	itt	mi
 8007cbc:	232b      	movmi	r3, #43	; 0x2b
 8007cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc8:	d015      	beq.n	8007cf6 <_svfiprintf_r+0xf6>
 8007cca:	9a07      	ldr	r2, [sp, #28]
 8007ccc:	4654      	mov	r4, sl
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f04f 0c0a 	mov.w	ip, #10
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cda:	3b30      	subs	r3, #48	; 0x30
 8007cdc:	2b09      	cmp	r3, #9
 8007cde:	d94d      	bls.n	8007d7c <_svfiprintf_r+0x17c>
 8007ce0:	b1b0      	cbz	r0, 8007d10 <_svfiprintf_r+0x110>
 8007ce2:	9207      	str	r2, [sp, #28]
 8007ce4:	e014      	b.n	8007d10 <_svfiprintf_r+0x110>
 8007ce6:	eba0 0308 	sub.w	r3, r0, r8
 8007cea:	fa09 f303 	lsl.w	r3, r9, r3
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	9304      	str	r3, [sp, #16]
 8007cf2:	46a2      	mov	sl, r4
 8007cf4:	e7d2      	b.n	8007c9c <_svfiprintf_r+0x9c>
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	1d19      	adds	r1, r3, #4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	9103      	str	r1, [sp, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bfbb      	ittet	lt
 8007d02:	425b      	neglt	r3, r3
 8007d04:	f042 0202 	orrlt.w	r2, r2, #2
 8007d08:	9307      	strge	r3, [sp, #28]
 8007d0a:	9307      	strlt	r3, [sp, #28]
 8007d0c:	bfb8      	it	lt
 8007d0e:	9204      	strlt	r2, [sp, #16]
 8007d10:	7823      	ldrb	r3, [r4, #0]
 8007d12:	2b2e      	cmp	r3, #46	; 0x2e
 8007d14:	d10c      	bne.n	8007d30 <_svfiprintf_r+0x130>
 8007d16:	7863      	ldrb	r3, [r4, #1]
 8007d18:	2b2a      	cmp	r3, #42	; 0x2a
 8007d1a:	d134      	bne.n	8007d86 <_svfiprintf_r+0x186>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	1d1a      	adds	r2, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	9203      	str	r2, [sp, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfb8      	it	lt
 8007d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d2c:	3402      	adds	r4, #2
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007df8 <_svfiprintf_r+0x1f8>
 8007d34:	7821      	ldrb	r1, [r4, #0]
 8007d36:	2203      	movs	r2, #3
 8007d38:	4650      	mov	r0, sl
 8007d3a:	f7f8 fa79 	bl	8000230 <memchr>
 8007d3e:	b138      	cbz	r0, 8007d50 <_svfiprintf_r+0x150>
 8007d40:	9b04      	ldr	r3, [sp, #16]
 8007d42:	eba0 000a 	sub.w	r0, r0, sl
 8007d46:	2240      	movs	r2, #64	; 0x40
 8007d48:	4082      	lsls	r2, r0
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	3401      	adds	r4, #1
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d54:	4825      	ldr	r0, [pc, #148]	; (8007dec <_svfiprintf_r+0x1ec>)
 8007d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d5a:	2206      	movs	r2, #6
 8007d5c:	f7f8 fa68 	bl	8000230 <memchr>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d038      	beq.n	8007dd6 <_svfiprintf_r+0x1d6>
 8007d64:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <_svfiprintf_r+0x1f0>)
 8007d66:	bb1b      	cbnz	r3, 8007db0 <_svfiprintf_r+0x1b0>
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	3307      	adds	r3, #7
 8007d6c:	f023 0307 	bic.w	r3, r3, #7
 8007d70:	3308      	adds	r3, #8
 8007d72:	9303      	str	r3, [sp, #12]
 8007d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d76:	4433      	add	r3, r6
 8007d78:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7a:	e768      	b.n	8007c4e <_svfiprintf_r+0x4e>
 8007d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d80:	460c      	mov	r4, r1
 8007d82:	2001      	movs	r0, #1
 8007d84:	e7a6      	b.n	8007cd4 <_svfiprintf_r+0xd4>
 8007d86:	2300      	movs	r3, #0
 8007d88:	3401      	adds	r4, #1
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f04f 0c0a 	mov.w	ip, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d98:	3a30      	subs	r2, #48	; 0x30
 8007d9a:	2a09      	cmp	r2, #9
 8007d9c:	d903      	bls.n	8007da6 <_svfiprintf_r+0x1a6>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0c6      	beq.n	8007d30 <_svfiprintf_r+0x130>
 8007da2:	9105      	str	r1, [sp, #20]
 8007da4:	e7c4      	b.n	8007d30 <_svfiprintf_r+0x130>
 8007da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007daa:	4604      	mov	r4, r0
 8007dac:	2301      	movs	r3, #1
 8007dae:	e7f0      	b.n	8007d92 <_svfiprintf_r+0x192>
 8007db0:	ab03      	add	r3, sp, #12
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	462a      	mov	r2, r5
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <_svfiprintf_r+0x1f4>)
 8007db8:	a904      	add	r1, sp, #16
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	1c42      	adds	r2, r0, #1
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	d1d6      	bne.n	8007d74 <_svfiprintf_r+0x174>
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	065b      	lsls	r3, r3, #25
 8007dca:	f53f af2d 	bmi.w	8007c28 <_svfiprintf_r+0x28>
 8007dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dd0:	b01d      	add	sp, #116	; 0x74
 8007dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	ab03      	add	r3, sp, #12
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	462a      	mov	r2, r5
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <_svfiprintf_r+0x1f4>)
 8007dde:	a904      	add	r1, sp, #16
 8007de0:	4638      	mov	r0, r7
 8007de2:	f000 f879 	bl	8007ed8 <_printf_i>
 8007de6:	e7eb      	b.n	8007dc0 <_svfiprintf_r+0x1c0>
 8007de8:	08008a43 	.word	0x08008a43
 8007dec:	08008a4d 	.word	0x08008a4d
 8007df0:	00000000 	.word	0x00000000
 8007df4:	08007b4d 	.word	0x08007b4d
 8007df8:	08008a49 	.word	0x08008a49

08007dfc <_printf_common>:
 8007dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	4616      	mov	r6, r2
 8007e02:	4699      	mov	r9, r3
 8007e04:	688a      	ldr	r2, [r1, #8]
 8007e06:	690b      	ldr	r3, [r1, #16]
 8007e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	bfb8      	it	lt
 8007e10:	4613      	movlt	r3, r2
 8007e12:	6033      	str	r3, [r6, #0]
 8007e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e18:	4607      	mov	r7, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	b10a      	cbz	r2, 8007e22 <_printf_common+0x26>
 8007e1e:	3301      	adds	r3, #1
 8007e20:	6033      	str	r3, [r6, #0]
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	0699      	lsls	r1, r3, #26
 8007e26:	bf42      	ittt	mi
 8007e28:	6833      	ldrmi	r3, [r6, #0]
 8007e2a:	3302      	addmi	r3, #2
 8007e2c:	6033      	strmi	r3, [r6, #0]
 8007e2e:	6825      	ldr	r5, [r4, #0]
 8007e30:	f015 0506 	ands.w	r5, r5, #6
 8007e34:	d106      	bne.n	8007e44 <_printf_common+0x48>
 8007e36:	f104 0a19 	add.w	sl, r4, #25
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	6832      	ldr	r2, [r6, #0]
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	42ab      	cmp	r3, r5
 8007e42:	dc26      	bgt.n	8007e92 <_printf_common+0x96>
 8007e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e48:	1e13      	subs	r3, r2, #0
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	bf18      	it	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	0692      	lsls	r2, r2, #26
 8007e52:	d42b      	bmi.n	8007eac <_printf_common+0xb0>
 8007e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4638      	mov	r0, r7
 8007e5c:	47c0      	blx	r8
 8007e5e:	3001      	adds	r0, #1
 8007e60:	d01e      	beq.n	8007ea0 <_printf_common+0xa4>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	f003 0306 	and.w	r3, r3, #6
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	bf02      	ittt	eq
 8007e6e:	68e5      	ldreq	r5, [r4, #12]
 8007e70:	6833      	ldreq	r3, [r6, #0]
 8007e72:	1aed      	subeq	r5, r5, r3
 8007e74:	68a3      	ldr	r3, [r4, #8]
 8007e76:	bf0c      	ite	eq
 8007e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e7c:	2500      	movne	r5, #0
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	bfc4      	itt	gt
 8007e82:	1a9b      	subgt	r3, r3, r2
 8007e84:	18ed      	addgt	r5, r5, r3
 8007e86:	2600      	movs	r6, #0
 8007e88:	341a      	adds	r4, #26
 8007e8a:	42b5      	cmp	r5, r6
 8007e8c:	d11a      	bne.n	8007ec4 <_printf_common+0xc8>
 8007e8e:	2000      	movs	r0, #0
 8007e90:	e008      	b.n	8007ea4 <_printf_common+0xa8>
 8007e92:	2301      	movs	r3, #1
 8007e94:	4652      	mov	r2, sl
 8007e96:	4649      	mov	r1, r9
 8007e98:	4638      	mov	r0, r7
 8007e9a:	47c0      	blx	r8
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d103      	bne.n	8007ea8 <_printf_common+0xac>
 8007ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	e7c6      	b.n	8007e3a <_printf_common+0x3e>
 8007eac:	18e1      	adds	r1, r4, r3
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	2030      	movs	r0, #48	; 0x30
 8007eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eb6:	4422      	add	r2, r4
 8007eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	e7c7      	b.n	8007e54 <_printf_common+0x58>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	4622      	mov	r2, r4
 8007ec8:	4649      	mov	r1, r9
 8007eca:	4638      	mov	r0, r7
 8007ecc:	47c0      	blx	r8
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d0e6      	beq.n	8007ea0 <_printf_common+0xa4>
 8007ed2:	3601      	adds	r6, #1
 8007ed4:	e7d9      	b.n	8007e8a <_printf_common+0x8e>
	...

08007ed8 <_printf_i>:
 8007ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	7e0f      	ldrb	r7, [r1, #24]
 8007ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ee0:	2f78      	cmp	r7, #120	; 0x78
 8007ee2:	4691      	mov	r9, r2
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	469a      	mov	sl, r3
 8007eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eee:	d807      	bhi.n	8007f00 <_printf_i+0x28>
 8007ef0:	2f62      	cmp	r7, #98	; 0x62
 8007ef2:	d80a      	bhi.n	8007f0a <_printf_i+0x32>
 8007ef4:	2f00      	cmp	r7, #0
 8007ef6:	f000 80d4 	beq.w	80080a2 <_printf_i+0x1ca>
 8007efa:	2f58      	cmp	r7, #88	; 0x58
 8007efc:	f000 80c0 	beq.w	8008080 <_printf_i+0x1a8>
 8007f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f08:	e03a      	b.n	8007f80 <_printf_i+0xa8>
 8007f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f0e:	2b15      	cmp	r3, #21
 8007f10:	d8f6      	bhi.n	8007f00 <_printf_i+0x28>
 8007f12:	a101      	add	r1, pc, #4	; (adr r1, 8007f18 <_printf_i+0x40>)
 8007f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f18:	08007f71 	.word	0x08007f71
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f01 	.word	0x08007f01
 8007f24:	08007f01 	.word	0x08007f01
 8007f28:	08007f01 	.word	0x08007f01
 8007f2c:	08007f01 	.word	0x08007f01
 8007f30:	08007f85 	.word	0x08007f85
 8007f34:	08007f01 	.word	0x08007f01
 8007f38:	08007f01 	.word	0x08007f01
 8007f3c:	08007f01 	.word	0x08007f01
 8007f40:	08007f01 	.word	0x08007f01
 8007f44:	08008089 	.word	0x08008089
 8007f48:	08007fb1 	.word	0x08007fb1
 8007f4c:	08008043 	.word	0x08008043
 8007f50:	08007f01 	.word	0x08007f01
 8007f54:	08007f01 	.word	0x08007f01
 8007f58:	080080ab 	.word	0x080080ab
 8007f5c:	08007f01 	.word	0x08007f01
 8007f60:	08007fb1 	.word	0x08007fb1
 8007f64:	08007f01 	.word	0x08007f01
 8007f68:	08007f01 	.word	0x08007f01
 8007f6c:	0800804b 	.word	0x0800804b
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	1d1a      	adds	r2, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	602a      	str	r2, [r5, #0]
 8007f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f80:	2301      	movs	r3, #1
 8007f82:	e09f      	b.n	80080c4 <_printf_i+0x1ec>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	682b      	ldr	r3, [r5, #0]
 8007f88:	0607      	lsls	r7, r0, #24
 8007f8a:	f103 0104 	add.w	r1, r3, #4
 8007f8e:	6029      	str	r1, [r5, #0]
 8007f90:	d501      	bpl.n	8007f96 <_printf_i+0xbe>
 8007f92:	681e      	ldr	r6, [r3, #0]
 8007f94:	e003      	b.n	8007f9e <_printf_i+0xc6>
 8007f96:	0646      	lsls	r6, r0, #25
 8007f98:	d5fb      	bpl.n	8007f92 <_printf_i+0xba>
 8007f9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f9e:	2e00      	cmp	r6, #0
 8007fa0:	da03      	bge.n	8007faa <_printf_i+0xd2>
 8007fa2:	232d      	movs	r3, #45	; 0x2d
 8007fa4:	4276      	negs	r6, r6
 8007fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007faa:	485a      	ldr	r0, [pc, #360]	; (8008114 <_printf_i+0x23c>)
 8007fac:	230a      	movs	r3, #10
 8007fae:	e012      	b.n	8007fd6 <_printf_i+0xfe>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	6820      	ldr	r0, [r4, #0]
 8007fb4:	1d19      	adds	r1, r3, #4
 8007fb6:	6029      	str	r1, [r5, #0]
 8007fb8:	0605      	lsls	r5, r0, #24
 8007fba:	d501      	bpl.n	8007fc0 <_printf_i+0xe8>
 8007fbc:	681e      	ldr	r6, [r3, #0]
 8007fbe:	e002      	b.n	8007fc6 <_printf_i+0xee>
 8007fc0:	0641      	lsls	r1, r0, #25
 8007fc2:	d5fb      	bpl.n	8007fbc <_printf_i+0xe4>
 8007fc4:	881e      	ldrh	r6, [r3, #0]
 8007fc6:	4853      	ldr	r0, [pc, #332]	; (8008114 <_printf_i+0x23c>)
 8007fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8007fca:	bf0c      	ite	eq
 8007fcc:	2308      	moveq	r3, #8
 8007fce:	230a      	movne	r3, #10
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fd6:	6865      	ldr	r5, [r4, #4]
 8007fd8:	60a5      	str	r5, [r4, #8]
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	bfa2      	ittt	ge
 8007fde:	6821      	ldrge	r1, [r4, #0]
 8007fe0:	f021 0104 	bicge.w	r1, r1, #4
 8007fe4:	6021      	strge	r1, [r4, #0]
 8007fe6:	b90e      	cbnz	r6, 8007fec <_printf_i+0x114>
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	d04b      	beq.n	8008084 <_printf_i+0x1ac>
 8007fec:	4615      	mov	r5, r2
 8007fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ff6:	5dc7      	ldrb	r7, [r0, r7]
 8007ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ffc:	4637      	mov	r7, r6
 8007ffe:	42bb      	cmp	r3, r7
 8008000:	460e      	mov	r6, r1
 8008002:	d9f4      	bls.n	8007fee <_printf_i+0x116>
 8008004:	2b08      	cmp	r3, #8
 8008006:	d10b      	bne.n	8008020 <_printf_i+0x148>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	07de      	lsls	r6, r3, #31
 800800c:	d508      	bpl.n	8008020 <_printf_i+0x148>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	6861      	ldr	r1, [r4, #4]
 8008012:	4299      	cmp	r1, r3
 8008014:	bfde      	ittt	le
 8008016:	2330      	movle	r3, #48	; 0x30
 8008018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800801c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008020:	1b52      	subs	r2, r2, r5
 8008022:	6122      	str	r2, [r4, #16]
 8008024:	f8cd a000 	str.w	sl, [sp]
 8008028:	464b      	mov	r3, r9
 800802a:	aa03      	add	r2, sp, #12
 800802c:	4621      	mov	r1, r4
 800802e:	4640      	mov	r0, r8
 8008030:	f7ff fee4 	bl	8007dfc <_printf_common>
 8008034:	3001      	adds	r0, #1
 8008036:	d14a      	bne.n	80080ce <_printf_i+0x1f6>
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	b004      	add	sp, #16
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	f043 0320 	orr.w	r3, r3, #32
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	4833      	ldr	r0, [pc, #204]	; (8008118 <_printf_i+0x240>)
 800804c:	2778      	movs	r7, #120	; 0x78
 800804e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	6829      	ldr	r1, [r5, #0]
 8008056:	061f      	lsls	r7, r3, #24
 8008058:	f851 6b04 	ldr.w	r6, [r1], #4
 800805c:	d402      	bmi.n	8008064 <_printf_i+0x18c>
 800805e:	065f      	lsls	r7, r3, #25
 8008060:	bf48      	it	mi
 8008062:	b2b6      	uxthmi	r6, r6
 8008064:	07df      	lsls	r7, r3, #31
 8008066:	bf48      	it	mi
 8008068:	f043 0320 	orrmi.w	r3, r3, #32
 800806c:	6029      	str	r1, [r5, #0]
 800806e:	bf48      	it	mi
 8008070:	6023      	strmi	r3, [r4, #0]
 8008072:	b91e      	cbnz	r6, 800807c <_printf_i+0x1a4>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	f023 0320 	bic.w	r3, r3, #32
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	2310      	movs	r3, #16
 800807e:	e7a7      	b.n	8007fd0 <_printf_i+0xf8>
 8008080:	4824      	ldr	r0, [pc, #144]	; (8008114 <_printf_i+0x23c>)
 8008082:	e7e4      	b.n	800804e <_printf_i+0x176>
 8008084:	4615      	mov	r5, r2
 8008086:	e7bd      	b.n	8008004 <_printf_i+0x12c>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	6826      	ldr	r6, [r4, #0]
 800808c:	6961      	ldr	r1, [r4, #20]
 800808e:	1d18      	adds	r0, r3, #4
 8008090:	6028      	str	r0, [r5, #0]
 8008092:	0635      	lsls	r5, r6, #24
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	d501      	bpl.n	800809c <_printf_i+0x1c4>
 8008098:	6019      	str	r1, [r3, #0]
 800809a:	e002      	b.n	80080a2 <_printf_i+0x1ca>
 800809c:	0670      	lsls	r0, r6, #25
 800809e:	d5fb      	bpl.n	8008098 <_printf_i+0x1c0>
 80080a0:	8019      	strh	r1, [r3, #0]
 80080a2:	2300      	movs	r3, #0
 80080a4:	6123      	str	r3, [r4, #16]
 80080a6:	4615      	mov	r5, r2
 80080a8:	e7bc      	b.n	8008024 <_printf_i+0x14c>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	1d1a      	adds	r2, r3, #4
 80080ae:	602a      	str	r2, [r5, #0]
 80080b0:	681d      	ldr	r5, [r3, #0]
 80080b2:	6862      	ldr	r2, [r4, #4]
 80080b4:	2100      	movs	r1, #0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f7f8 f8ba 	bl	8000230 <memchr>
 80080bc:	b108      	cbz	r0, 80080c2 <_printf_i+0x1ea>
 80080be:	1b40      	subs	r0, r0, r5
 80080c0:	6060      	str	r0, [r4, #4]
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	2300      	movs	r3, #0
 80080c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080cc:	e7aa      	b.n	8008024 <_printf_i+0x14c>
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	462a      	mov	r2, r5
 80080d2:	4649      	mov	r1, r9
 80080d4:	4640      	mov	r0, r8
 80080d6:	47d0      	blx	sl
 80080d8:	3001      	adds	r0, #1
 80080da:	d0ad      	beq.n	8008038 <_printf_i+0x160>
 80080dc:	6823      	ldr	r3, [r4, #0]
 80080de:	079b      	lsls	r3, r3, #30
 80080e0:	d413      	bmi.n	800810a <_printf_i+0x232>
 80080e2:	68e0      	ldr	r0, [r4, #12]
 80080e4:	9b03      	ldr	r3, [sp, #12]
 80080e6:	4298      	cmp	r0, r3
 80080e8:	bfb8      	it	lt
 80080ea:	4618      	movlt	r0, r3
 80080ec:	e7a6      	b.n	800803c <_printf_i+0x164>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4632      	mov	r2, r6
 80080f2:	4649      	mov	r1, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	47d0      	blx	sl
 80080f8:	3001      	adds	r0, #1
 80080fa:	d09d      	beq.n	8008038 <_printf_i+0x160>
 80080fc:	3501      	adds	r5, #1
 80080fe:	68e3      	ldr	r3, [r4, #12]
 8008100:	9903      	ldr	r1, [sp, #12]
 8008102:	1a5b      	subs	r3, r3, r1
 8008104:	42ab      	cmp	r3, r5
 8008106:	dcf2      	bgt.n	80080ee <_printf_i+0x216>
 8008108:	e7eb      	b.n	80080e2 <_printf_i+0x20a>
 800810a:	2500      	movs	r5, #0
 800810c:	f104 0619 	add.w	r6, r4, #25
 8008110:	e7f5      	b.n	80080fe <_printf_i+0x226>
 8008112:	bf00      	nop
 8008114:	08008a54 	.word	0x08008a54
 8008118:	08008a65 	.word	0x08008a65

0800811c <__sflush_r>:
 800811c:	898a      	ldrh	r2, [r1, #12]
 800811e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008122:	4605      	mov	r5, r0
 8008124:	0710      	lsls	r0, r2, #28
 8008126:	460c      	mov	r4, r1
 8008128:	d458      	bmi.n	80081dc <__sflush_r+0xc0>
 800812a:	684b      	ldr	r3, [r1, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	dc05      	bgt.n	800813c <__sflush_r+0x20>
 8008130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	dc02      	bgt.n	800813c <__sflush_r+0x20>
 8008136:	2000      	movs	r0, #0
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800813e:	2e00      	cmp	r6, #0
 8008140:	d0f9      	beq.n	8008136 <__sflush_r+0x1a>
 8008142:	2300      	movs	r3, #0
 8008144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008148:	682f      	ldr	r7, [r5, #0]
 800814a:	6a21      	ldr	r1, [r4, #32]
 800814c:	602b      	str	r3, [r5, #0]
 800814e:	d032      	beq.n	80081b6 <__sflush_r+0x9a>
 8008150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	075a      	lsls	r2, r3, #29
 8008156:	d505      	bpl.n	8008164 <__sflush_r+0x48>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	1ac0      	subs	r0, r0, r3
 800815c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800815e:	b10b      	cbz	r3, 8008164 <__sflush_r+0x48>
 8008160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008162:	1ac0      	subs	r0, r0, r3
 8008164:	2300      	movs	r3, #0
 8008166:	4602      	mov	r2, r0
 8008168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800816a:	6a21      	ldr	r1, [r4, #32]
 800816c:	4628      	mov	r0, r5
 800816e:	47b0      	blx	r6
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	d106      	bne.n	8008184 <__sflush_r+0x68>
 8008176:	6829      	ldr	r1, [r5, #0]
 8008178:	291d      	cmp	r1, #29
 800817a:	d82b      	bhi.n	80081d4 <__sflush_r+0xb8>
 800817c:	4a29      	ldr	r2, [pc, #164]	; (8008224 <__sflush_r+0x108>)
 800817e:	410a      	asrs	r2, r1
 8008180:	07d6      	lsls	r6, r2, #31
 8008182:	d427      	bmi.n	80081d4 <__sflush_r+0xb8>
 8008184:	2200      	movs	r2, #0
 8008186:	6062      	str	r2, [r4, #4]
 8008188:	04d9      	lsls	r1, r3, #19
 800818a:	6922      	ldr	r2, [r4, #16]
 800818c:	6022      	str	r2, [r4, #0]
 800818e:	d504      	bpl.n	800819a <__sflush_r+0x7e>
 8008190:	1c42      	adds	r2, r0, #1
 8008192:	d101      	bne.n	8008198 <__sflush_r+0x7c>
 8008194:	682b      	ldr	r3, [r5, #0]
 8008196:	b903      	cbnz	r3, 800819a <__sflush_r+0x7e>
 8008198:	6560      	str	r0, [r4, #84]	; 0x54
 800819a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800819c:	602f      	str	r7, [r5, #0]
 800819e:	2900      	cmp	r1, #0
 80081a0:	d0c9      	beq.n	8008136 <__sflush_r+0x1a>
 80081a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081a6:	4299      	cmp	r1, r3
 80081a8:	d002      	beq.n	80081b0 <__sflush_r+0x94>
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff fbce 	bl	800794c <_free_r>
 80081b0:	2000      	movs	r0, #0
 80081b2:	6360      	str	r0, [r4, #52]	; 0x34
 80081b4:	e7c0      	b.n	8008138 <__sflush_r+0x1c>
 80081b6:	2301      	movs	r3, #1
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b0      	blx	r6
 80081bc:	1c41      	adds	r1, r0, #1
 80081be:	d1c8      	bne.n	8008152 <__sflush_r+0x36>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0c5      	beq.n	8008152 <__sflush_r+0x36>
 80081c6:	2b1d      	cmp	r3, #29
 80081c8:	d001      	beq.n	80081ce <__sflush_r+0xb2>
 80081ca:	2b16      	cmp	r3, #22
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0xb6>
 80081ce:	602f      	str	r7, [r5, #0]
 80081d0:	e7b1      	b.n	8008136 <__sflush_r+0x1a>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	e7ad      	b.n	8008138 <__sflush_r+0x1c>
 80081dc:	690f      	ldr	r7, [r1, #16]
 80081de:	2f00      	cmp	r7, #0
 80081e0:	d0a9      	beq.n	8008136 <__sflush_r+0x1a>
 80081e2:	0793      	lsls	r3, r2, #30
 80081e4:	680e      	ldr	r6, [r1, #0]
 80081e6:	bf08      	it	eq
 80081e8:	694b      	ldreq	r3, [r1, #20]
 80081ea:	600f      	str	r7, [r1, #0]
 80081ec:	bf18      	it	ne
 80081ee:	2300      	movne	r3, #0
 80081f0:	eba6 0807 	sub.w	r8, r6, r7
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	dd9c      	ble.n	8008136 <__sflush_r+0x1a>
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008200:	4643      	mov	r3, r8
 8008202:	463a      	mov	r2, r7
 8008204:	4628      	mov	r0, r5
 8008206:	47b0      	blx	r6
 8008208:	2800      	cmp	r0, #0
 800820a:	dc06      	bgt.n	800821a <__sflush_r+0xfe>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	e78e      	b.n	8008138 <__sflush_r+0x1c>
 800821a:	4407      	add	r7, r0
 800821c:	eba8 0800 	sub.w	r8, r8, r0
 8008220:	e7e9      	b.n	80081f6 <__sflush_r+0xda>
 8008222:	bf00      	nop
 8008224:	dfbffffe 	.word	0xdfbffffe

08008228 <_fflush_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	690b      	ldr	r3, [r1, #16]
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	b913      	cbnz	r3, 8008238 <_fflush_r+0x10>
 8008232:	2500      	movs	r5, #0
 8008234:	4628      	mov	r0, r5
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	b118      	cbz	r0, 8008242 <_fflush_r+0x1a>
 800823a:	6a03      	ldr	r3, [r0, #32]
 800823c:	b90b      	cbnz	r3, 8008242 <_fflush_r+0x1a>
 800823e:	f7ff fa3b 	bl	80076b8 <__sinit>
 8008242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0f3      	beq.n	8008232 <_fflush_r+0xa>
 800824a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800824c:	07d0      	lsls	r0, r2, #31
 800824e:	d404      	bmi.n	800825a <_fflush_r+0x32>
 8008250:	0599      	lsls	r1, r3, #22
 8008252:	d402      	bmi.n	800825a <_fflush_r+0x32>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f7ff fb58 	bl	800790a <__retarget_lock_acquire_recursive>
 800825a:	4628      	mov	r0, r5
 800825c:	4621      	mov	r1, r4
 800825e:	f7ff ff5d 	bl	800811c <__sflush_r>
 8008262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008264:	07da      	lsls	r2, r3, #31
 8008266:	4605      	mov	r5, r0
 8008268:	d4e4      	bmi.n	8008234 <_fflush_r+0xc>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	059b      	lsls	r3, r3, #22
 800826e:	d4e1      	bmi.n	8008234 <_fflush_r+0xc>
 8008270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008272:	f7ff fb4b 	bl	800790c <__retarget_lock_release_recursive>
 8008276:	e7dd      	b.n	8008234 <_fflush_r+0xc>

08008278 <fiprintf>:
 8008278:	b40e      	push	{r1, r2, r3}
 800827a:	b503      	push	{r0, r1, lr}
 800827c:	4601      	mov	r1, r0
 800827e:	ab03      	add	r3, sp, #12
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <fiprintf+0x20>)
 8008282:	f853 2b04 	ldr.w	r2, [r3], #4
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	f000 f89f 	bl	80083cc <_vfiprintf_r>
 800828e:	b002      	add	sp, #8
 8008290:	f85d eb04 	ldr.w	lr, [sp], #4
 8008294:	b003      	add	sp, #12
 8008296:	4770      	bx	lr
 8008298:	20000064 	.word	0x20000064

0800829c <memmove>:
 800829c:	4288      	cmp	r0, r1
 800829e:	b510      	push	{r4, lr}
 80082a0:	eb01 0402 	add.w	r4, r1, r2
 80082a4:	d902      	bls.n	80082ac <memmove+0x10>
 80082a6:	4284      	cmp	r4, r0
 80082a8:	4623      	mov	r3, r4
 80082aa:	d807      	bhi.n	80082bc <memmove+0x20>
 80082ac:	1e43      	subs	r3, r0, #1
 80082ae:	42a1      	cmp	r1, r4
 80082b0:	d008      	beq.n	80082c4 <memmove+0x28>
 80082b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082ba:	e7f8      	b.n	80082ae <memmove+0x12>
 80082bc:	4402      	add	r2, r0
 80082be:	4601      	mov	r1, r0
 80082c0:	428a      	cmp	r2, r1
 80082c2:	d100      	bne.n	80082c6 <memmove+0x2a>
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ce:	e7f7      	b.n	80082c0 <memmove+0x24>

080082d0 <_sbrk_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d06      	ldr	r5, [pc, #24]	; (80082ec <_sbrk_r+0x1c>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	f7f9 f8b6 	bl	800144c <_sbrk>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_sbrk_r+0x1a>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_sbrk_r+0x1a>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000520 	.word	0x20000520

080082f0 <memcpy>:
 80082f0:	440a      	add	r2, r1
 80082f2:	4291      	cmp	r1, r2
 80082f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80082f8:	d100      	bne.n	80082fc <memcpy+0xc>
 80082fa:	4770      	bx	lr
 80082fc:	b510      	push	{r4, lr}
 80082fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008306:	4291      	cmp	r1, r2
 8008308:	d1f9      	bne.n	80082fe <memcpy+0xe>
 800830a:	bd10      	pop	{r4, pc}

0800830c <abort>:
 800830c:	b508      	push	{r3, lr}
 800830e:	2006      	movs	r0, #6
 8008310:	f000 fa34 	bl	800877c <raise>
 8008314:	2001      	movs	r0, #1
 8008316:	f7f9 f821 	bl	800135c <_exit>

0800831a <_realloc_r>:
 800831a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800831e:	4680      	mov	r8, r0
 8008320:	4614      	mov	r4, r2
 8008322:	460e      	mov	r6, r1
 8008324:	b921      	cbnz	r1, 8008330 <_realloc_r+0x16>
 8008326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800832a:	4611      	mov	r1, r2
 800832c:	f7ff bb82 	b.w	8007a34 <_malloc_r>
 8008330:	b92a      	cbnz	r2, 800833e <_realloc_r+0x24>
 8008332:	f7ff fb0b 	bl	800794c <_free_r>
 8008336:	4625      	mov	r5, r4
 8008338:	4628      	mov	r0, r5
 800833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800833e:	f000 fa39 	bl	80087b4 <_malloc_usable_size_r>
 8008342:	4284      	cmp	r4, r0
 8008344:	4607      	mov	r7, r0
 8008346:	d802      	bhi.n	800834e <_realloc_r+0x34>
 8008348:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800834c:	d812      	bhi.n	8008374 <_realloc_r+0x5a>
 800834e:	4621      	mov	r1, r4
 8008350:	4640      	mov	r0, r8
 8008352:	f7ff fb6f 	bl	8007a34 <_malloc_r>
 8008356:	4605      	mov	r5, r0
 8008358:	2800      	cmp	r0, #0
 800835a:	d0ed      	beq.n	8008338 <_realloc_r+0x1e>
 800835c:	42bc      	cmp	r4, r7
 800835e:	4622      	mov	r2, r4
 8008360:	4631      	mov	r1, r6
 8008362:	bf28      	it	cs
 8008364:	463a      	movcs	r2, r7
 8008366:	f7ff ffc3 	bl	80082f0 <memcpy>
 800836a:	4631      	mov	r1, r6
 800836c:	4640      	mov	r0, r8
 800836e:	f7ff faed 	bl	800794c <_free_r>
 8008372:	e7e1      	b.n	8008338 <_realloc_r+0x1e>
 8008374:	4635      	mov	r5, r6
 8008376:	e7df      	b.n	8008338 <_realloc_r+0x1e>

08008378 <__sfputc_r>:
 8008378:	6893      	ldr	r3, [r2, #8]
 800837a:	3b01      	subs	r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	b410      	push	{r4}
 8008380:	6093      	str	r3, [r2, #8]
 8008382:	da08      	bge.n	8008396 <__sfputc_r+0x1e>
 8008384:	6994      	ldr	r4, [r2, #24]
 8008386:	42a3      	cmp	r3, r4
 8008388:	db01      	blt.n	800838e <__sfputc_r+0x16>
 800838a:	290a      	cmp	r1, #10
 800838c:	d103      	bne.n	8008396 <__sfputc_r+0x1e>
 800838e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008392:	f000 b935 	b.w	8008600 <__swbuf_r>
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	1c58      	adds	r0, r3, #1
 800839a:	6010      	str	r0, [r2, #0]
 800839c:	7019      	strb	r1, [r3, #0]
 800839e:	4608      	mov	r0, r1
 80083a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <__sfputs_r>:
 80083a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	18d5      	adds	r5, r2, r3
 80083b0:	42ac      	cmp	r4, r5
 80083b2:	d101      	bne.n	80083b8 <__sfputs_r+0x12>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e007      	b.n	80083c8 <__sfputs_r+0x22>
 80083b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083bc:	463a      	mov	r2, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ffda 	bl	8008378 <__sfputc_r>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d1f3      	bne.n	80083b0 <__sfputs_r+0xa>
 80083c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083cc <_vfiprintf_r>:
 80083cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d0:	460d      	mov	r5, r1
 80083d2:	b09d      	sub	sp, #116	; 0x74
 80083d4:	4614      	mov	r4, r2
 80083d6:	4698      	mov	r8, r3
 80083d8:	4606      	mov	r6, r0
 80083da:	b118      	cbz	r0, 80083e4 <_vfiprintf_r+0x18>
 80083dc:	6a03      	ldr	r3, [r0, #32]
 80083de:	b90b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x18>
 80083e0:	f7ff f96a 	bl	80076b8 <__sinit>
 80083e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e6:	07d9      	lsls	r1, r3, #31
 80083e8:	d405      	bmi.n	80083f6 <_vfiprintf_r+0x2a>
 80083ea:	89ab      	ldrh	r3, [r5, #12]
 80083ec:	059a      	lsls	r2, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_vfiprintf_r+0x2a>
 80083f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f2:	f7ff fa8a 	bl	800790a <__retarget_lock_acquire_recursive>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	071b      	lsls	r3, r3, #28
 80083fa:	d501      	bpl.n	8008400 <_vfiprintf_r+0x34>
 80083fc:	692b      	ldr	r3, [r5, #16]
 80083fe:	b99b      	cbnz	r3, 8008428 <_vfiprintf_r+0x5c>
 8008400:	4629      	mov	r1, r5
 8008402:	4630      	mov	r0, r6
 8008404:	f000 f93a 	bl	800867c <__swsetup_r>
 8008408:	b170      	cbz	r0, 8008428 <_vfiprintf_r+0x5c>
 800840a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800840c:	07dc      	lsls	r4, r3, #31
 800840e:	d504      	bpl.n	800841a <_vfiprintf_r+0x4e>
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	b01d      	add	sp, #116	; 0x74
 8008416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	0598      	lsls	r0, r3, #22
 800841e:	d4f7      	bmi.n	8008410 <_vfiprintf_r+0x44>
 8008420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008422:	f7ff fa73 	bl	800790c <__retarget_lock_release_recursive>
 8008426:	e7f3      	b.n	8008410 <_vfiprintf_r+0x44>
 8008428:	2300      	movs	r3, #0
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	2320      	movs	r3, #32
 800842e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008432:	f8cd 800c 	str.w	r8, [sp, #12]
 8008436:	2330      	movs	r3, #48	; 0x30
 8008438:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80085ec <_vfiprintf_r+0x220>
 800843c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008440:	f04f 0901 	mov.w	r9, #1
 8008444:	4623      	mov	r3, r4
 8008446:	469a      	mov	sl, r3
 8008448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844c:	b10a      	cbz	r2, 8008452 <_vfiprintf_r+0x86>
 800844e:	2a25      	cmp	r2, #37	; 0x25
 8008450:	d1f9      	bne.n	8008446 <_vfiprintf_r+0x7a>
 8008452:	ebba 0b04 	subs.w	fp, sl, r4
 8008456:	d00b      	beq.n	8008470 <_vfiprintf_r+0xa4>
 8008458:	465b      	mov	r3, fp
 800845a:	4622      	mov	r2, r4
 800845c:	4629      	mov	r1, r5
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ffa1 	bl	80083a6 <__sfputs_r>
 8008464:	3001      	adds	r0, #1
 8008466:	f000 80a9 	beq.w	80085bc <_vfiprintf_r+0x1f0>
 800846a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846c:	445a      	add	r2, fp
 800846e:	9209      	str	r2, [sp, #36]	; 0x24
 8008470:	f89a 3000 	ldrb.w	r3, [sl]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 80a1 	beq.w	80085bc <_vfiprintf_r+0x1f0>
 800847a:	2300      	movs	r3, #0
 800847c:	f04f 32ff 	mov.w	r2, #4294967295
 8008480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008484:	f10a 0a01 	add.w	sl, sl, #1
 8008488:	9304      	str	r3, [sp, #16]
 800848a:	9307      	str	r3, [sp, #28]
 800848c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008490:	931a      	str	r3, [sp, #104]	; 0x68
 8008492:	4654      	mov	r4, sl
 8008494:	2205      	movs	r2, #5
 8008496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800849a:	4854      	ldr	r0, [pc, #336]	; (80085ec <_vfiprintf_r+0x220>)
 800849c:	f7f7 fec8 	bl	8000230 <memchr>
 80084a0:	9a04      	ldr	r2, [sp, #16]
 80084a2:	b9d8      	cbnz	r0, 80084dc <_vfiprintf_r+0x110>
 80084a4:	06d1      	lsls	r1, r2, #27
 80084a6:	bf44      	itt	mi
 80084a8:	2320      	movmi	r3, #32
 80084aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ae:	0713      	lsls	r3, r2, #28
 80084b0:	bf44      	itt	mi
 80084b2:	232b      	movmi	r3, #43	; 0x2b
 80084b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b8:	f89a 3000 	ldrb.w	r3, [sl]
 80084bc:	2b2a      	cmp	r3, #42	; 0x2a
 80084be:	d015      	beq.n	80084ec <_vfiprintf_r+0x120>
 80084c0:	9a07      	ldr	r2, [sp, #28]
 80084c2:	4654      	mov	r4, sl
 80084c4:	2000      	movs	r0, #0
 80084c6:	f04f 0c0a 	mov.w	ip, #10
 80084ca:	4621      	mov	r1, r4
 80084cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d0:	3b30      	subs	r3, #48	; 0x30
 80084d2:	2b09      	cmp	r3, #9
 80084d4:	d94d      	bls.n	8008572 <_vfiprintf_r+0x1a6>
 80084d6:	b1b0      	cbz	r0, 8008506 <_vfiprintf_r+0x13a>
 80084d8:	9207      	str	r2, [sp, #28]
 80084da:	e014      	b.n	8008506 <_vfiprintf_r+0x13a>
 80084dc:	eba0 0308 	sub.w	r3, r0, r8
 80084e0:	fa09 f303 	lsl.w	r3, r9, r3
 80084e4:	4313      	orrs	r3, r2
 80084e6:	9304      	str	r3, [sp, #16]
 80084e8:	46a2      	mov	sl, r4
 80084ea:	e7d2      	b.n	8008492 <_vfiprintf_r+0xc6>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	1d19      	adds	r1, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	9103      	str	r1, [sp, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	bfbb      	ittet	lt
 80084f8:	425b      	neglt	r3, r3
 80084fa:	f042 0202 	orrlt.w	r2, r2, #2
 80084fe:	9307      	strge	r3, [sp, #28]
 8008500:	9307      	strlt	r3, [sp, #28]
 8008502:	bfb8      	it	lt
 8008504:	9204      	strlt	r2, [sp, #16]
 8008506:	7823      	ldrb	r3, [r4, #0]
 8008508:	2b2e      	cmp	r3, #46	; 0x2e
 800850a:	d10c      	bne.n	8008526 <_vfiprintf_r+0x15a>
 800850c:	7863      	ldrb	r3, [r4, #1]
 800850e:	2b2a      	cmp	r3, #42	; 0x2a
 8008510:	d134      	bne.n	800857c <_vfiprintf_r+0x1b0>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	1d1a      	adds	r2, r3, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	9203      	str	r2, [sp, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	bfb8      	it	lt
 800851e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008522:	3402      	adds	r4, #2
 8008524:	9305      	str	r3, [sp, #20]
 8008526:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80085fc <_vfiprintf_r+0x230>
 800852a:	7821      	ldrb	r1, [r4, #0]
 800852c:	2203      	movs	r2, #3
 800852e:	4650      	mov	r0, sl
 8008530:	f7f7 fe7e 	bl	8000230 <memchr>
 8008534:	b138      	cbz	r0, 8008546 <_vfiprintf_r+0x17a>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	eba0 000a 	sub.w	r0, r0, sl
 800853c:	2240      	movs	r2, #64	; 0x40
 800853e:	4082      	lsls	r2, r0
 8008540:	4313      	orrs	r3, r2
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	4829      	ldr	r0, [pc, #164]	; (80085f0 <_vfiprintf_r+0x224>)
 800854c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008550:	2206      	movs	r2, #6
 8008552:	f7f7 fe6d 	bl	8000230 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d03f      	beq.n	80085da <_vfiprintf_r+0x20e>
 800855a:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <_vfiprintf_r+0x228>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_vfiprintf_r+0x1da>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856c:	443b      	add	r3, r7
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	e768      	b.n	8008444 <_vfiprintf_r+0x78>
 8008572:	fb0c 3202 	mla	r2, ip, r2, r3
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	e7a6      	b.n	80084ca <_vfiprintf_r+0xfe>
 800857c:	2300      	movs	r3, #0
 800857e:	3401      	adds	r4, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4619      	mov	r1, r3
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	; 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_vfiprintf_r+0x1d0>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c6      	beq.n	8008526 <_vfiprintf_r+0x15a>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c4      	b.n	8008526 <_vfiprintf_r+0x15a>
 800859c:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f0      	b.n	8008588 <_vfiprintf_r+0x1bc>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <_vfiprintf_r+0x22c>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4630      	mov	r0, r6
 80085b2:	f3af 8000 	nop.w
 80085b6:	4607      	mov	r7, r0
 80085b8:	1c78      	adds	r0, r7, #1
 80085ba:	d1d6      	bne.n	800856a <_vfiprintf_r+0x19e>
 80085bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x202>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x202>
 80085c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ca:	f7ff f99f 	bl	800790c <__retarget_lock_release_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	065b      	lsls	r3, r3, #25
 80085d2:	f53f af1d 	bmi.w	8008410 <_vfiprintf_r+0x44>
 80085d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085d8:	e71c      	b.n	8008414 <_vfiprintf_r+0x48>
 80085da:	ab03      	add	r3, sp, #12
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	462a      	mov	r2, r5
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <_vfiprintf_r+0x22c>)
 80085e2:	a904      	add	r1, sp, #16
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7ff fc77 	bl	8007ed8 <_printf_i>
 80085ea:	e7e4      	b.n	80085b6 <_vfiprintf_r+0x1ea>
 80085ec:	08008a43 	.word	0x08008a43
 80085f0:	08008a4d 	.word	0x08008a4d
 80085f4:	00000000 	.word	0x00000000
 80085f8:	080083a7 	.word	0x080083a7
 80085fc:	08008a49 	.word	0x08008a49

08008600 <__swbuf_r>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	460e      	mov	r6, r1
 8008604:	4614      	mov	r4, r2
 8008606:	4605      	mov	r5, r0
 8008608:	b118      	cbz	r0, 8008612 <__swbuf_r+0x12>
 800860a:	6a03      	ldr	r3, [r0, #32]
 800860c:	b90b      	cbnz	r3, 8008612 <__swbuf_r+0x12>
 800860e:	f7ff f853 	bl	80076b8 <__sinit>
 8008612:	69a3      	ldr	r3, [r4, #24]
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	071a      	lsls	r2, r3, #28
 800861a:	d525      	bpl.n	8008668 <__swbuf_r+0x68>
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b31b      	cbz	r3, 8008668 <__swbuf_r+0x68>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	1a98      	subs	r0, r3, r2
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	b2f6      	uxtb	r6, r6
 800862a:	4283      	cmp	r3, r0
 800862c:	4637      	mov	r7, r6
 800862e:	dc04      	bgt.n	800863a <__swbuf_r+0x3a>
 8008630:	4621      	mov	r1, r4
 8008632:	4628      	mov	r0, r5
 8008634:	f7ff fdf8 	bl	8008228 <_fflush_r>
 8008638:	b9e0      	cbnz	r0, 8008674 <__swbuf_r+0x74>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	3b01      	subs	r3, #1
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	701e      	strb	r6, [r3, #0]
 8008648:	6962      	ldr	r2, [r4, #20]
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	429a      	cmp	r2, r3
 800864e:	d004      	beq.n	800865a <__swbuf_r+0x5a>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	07db      	lsls	r3, r3, #31
 8008654:	d506      	bpl.n	8008664 <__swbuf_r+0x64>
 8008656:	2e0a      	cmp	r6, #10
 8008658:	d104      	bne.n	8008664 <__swbuf_r+0x64>
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f7ff fde3 	bl	8008228 <_fflush_r>
 8008662:	b938      	cbnz	r0, 8008674 <__swbuf_r+0x74>
 8008664:	4638      	mov	r0, r7
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008668:	4621      	mov	r1, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f000 f806 	bl	800867c <__swsetup_r>
 8008670:	2800      	cmp	r0, #0
 8008672:	d0d5      	beq.n	8008620 <__swbuf_r+0x20>
 8008674:	f04f 37ff 	mov.w	r7, #4294967295
 8008678:	e7f4      	b.n	8008664 <__swbuf_r+0x64>
	...

0800867c <__swsetup_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4b2a      	ldr	r3, [pc, #168]	; (8008728 <__swsetup_r+0xac>)
 8008680:	4605      	mov	r5, r0
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	460c      	mov	r4, r1
 8008686:	b118      	cbz	r0, 8008690 <__swsetup_r+0x14>
 8008688:	6a03      	ldr	r3, [r0, #32]
 800868a:	b90b      	cbnz	r3, 8008690 <__swsetup_r+0x14>
 800868c:	f7ff f814 	bl	80076b8 <__sinit>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008696:	0718      	lsls	r0, r3, #28
 8008698:	d422      	bmi.n	80086e0 <__swsetup_r+0x64>
 800869a:	06d9      	lsls	r1, r3, #27
 800869c:	d407      	bmi.n	80086ae <__swsetup_r+0x32>
 800869e:	2309      	movs	r3, #9
 80086a0:	602b      	str	r3, [r5, #0]
 80086a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295
 80086ac:	e034      	b.n	8008718 <__swsetup_r+0x9c>
 80086ae:	0758      	lsls	r0, r3, #29
 80086b0:	d512      	bpl.n	80086d8 <__swsetup_r+0x5c>
 80086b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086b4:	b141      	cbz	r1, 80086c8 <__swsetup_r+0x4c>
 80086b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ba:	4299      	cmp	r1, r3
 80086bc:	d002      	beq.n	80086c4 <__swsetup_r+0x48>
 80086be:	4628      	mov	r0, r5
 80086c0:	f7ff f944 	bl	800794c <_free_r>
 80086c4:	2300      	movs	r3, #0
 80086c6:	6363      	str	r3, [r4, #52]	; 0x34
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	2300      	movs	r3, #0
 80086d2:	6063      	str	r3, [r4, #4]
 80086d4:	6923      	ldr	r3, [r4, #16]
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f043 0308 	orr.w	r3, r3, #8
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	b94b      	cbnz	r3, 80086f8 <__swsetup_r+0x7c>
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ee:	d003      	beq.n	80086f8 <__swsetup_r+0x7c>
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 f88c 	bl	8008810 <__smakebuf_r>
 80086f8:	89a0      	ldrh	r0, [r4, #12]
 80086fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086fe:	f010 0301 	ands.w	r3, r0, #1
 8008702:	d00a      	beq.n	800871a <__swsetup_r+0x9e>
 8008704:	2300      	movs	r3, #0
 8008706:	60a3      	str	r3, [r4, #8]
 8008708:	6963      	ldr	r3, [r4, #20]
 800870a:	425b      	negs	r3, r3
 800870c:	61a3      	str	r3, [r4, #24]
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	b943      	cbnz	r3, 8008724 <__swsetup_r+0xa8>
 8008712:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008716:	d1c4      	bne.n	80086a2 <__swsetup_r+0x26>
 8008718:	bd38      	pop	{r3, r4, r5, pc}
 800871a:	0781      	lsls	r1, r0, #30
 800871c:	bf58      	it	pl
 800871e:	6963      	ldrpl	r3, [r4, #20]
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	e7f4      	b.n	800870e <__swsetup_r+0x92>
 8008724:	2000      	movs	r0, #0
 8008726:	e7f7      	b.n	8008718 <__swsetup_r+0x9c>
 8008728:	20000064 	.word	0x20000064

0800872c <_raise_r>:
 800872c:	291f      	cmp	r1, #31
 800872e:	b538      	push	{r3, r4, r5, lr}
 8008730:	4604      	mov	r4, r0
 8008732:	460d      	mov	r5, r1
 8008734:	d904      	bls.n	8008740 <_raise_r+0x14>
 8008736:	2316      	movs	r3, #22
 8008738:	6003      	str	r3, [r0, #0]
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008742:	b112      	cbz	r2, 800874a <_raise_r+0x1e>
 8008744:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008748:	b94b      	cbnz	r3, 800875e <_raise_r+0x32>
 800874a:	4620      	mov	r0, r4
 800874c:	f000 f830 	bl	80087b0 <_getpid_r>
 8008750:	462a      	mov	r2, r5
 8008752:	4601      	mov	r1, r0
 8008754:	4620      	mov	r0, r4
 8008756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875a:	f000 b817 	b.w	800878c <_kill_r>
 800875e:	2b01      	cmp	r3, #1
 8008760:	d00a      	beq.n	8008778 <_raise_r+0x4c>
 8008762:	1c59      	adds	r1, r3, #1
 8008764:	d103      	bne.n	800876e <_raise_r+0x42>
 8008766:	2316      	movs	r3, #22
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	2001      	movs	r0, #1
 800876c:	e7e7      	b.n	800873e <_raise_r+0x12>
 800876e:	2400      	movs	r4, #0
 8008770:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008774:	4628      	mov	r0, r5
 8008776:	4798      	blx	r3
 8008778:	2000      	movs	r0, #0
 800877a:	e7e0      	b.n	800873e <_raise_r+0x12>

0800877c <raise>:
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <raise+0xc>)
 800877e:	4601      	mov	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f7ff bfd3 	b.w	800872c <_raise_r>
 8008786:	bf00      	nop
 8008788:	20000064 	.word	0x20000064

0800878c <_kill_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4d07      	ldr	r5, [pc, #28]	; (80087ac <_kill_r+0x20>)
 8008790:	2300      	movs	r3, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	602b      	str	r3, [r5, #0]
 800879a:	f7f8 fdcf 	bl	800133c <_kill>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d102      	bne.n	80087a8 <_kill_r+0x1c>
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	b103      	cbz	r3, 80087a8 <_kill_r+0x1c>
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	bf00      	nop
 80087ac:	20000520 	.word	0x20000520

080087b0 <_getpid_r>:
 80087b0:	f7f8 bdbc 	b.w	800132c <_getpid>

080087b4 <_malloc_usable_size_r>:
 80087b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b8:	1f18      	subs	r0, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfbc      	itt	lt
 80087be:	580b      	ldrlt	r3, [r1, r0]
 80087c0:	18c0      	addlt	r0, r0, r3
 80087c2:	4770      	bx	lr

080087c4 <__swhatbuf_r>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	460c      	mov	r4, r1
 80087c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087cc:	2900      	cmp	r1, #0
 80087ce:	b096      	sub	sp, #88	; 0x58
 80087d0:	4615      	mov	r5, r2
 80087d2:	461e      	mov	r6, r3
 80087d4:	da0d      	bge.n	80087f2 <__swhatbuf_r+0x2e>
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80087dc:	f04f 0100 	mov.w	r1, #0
 80087e0:	bf0c      	ite	eq
 80087e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80087e6:	2340      	movne	r3, #64	; 0x40
 80087e8:	2000      	movs	r0, #0
 80087ea:	6031      	str	r1, [r6, #0]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	b016      	add	sp, #88	; 0x58
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	466a      	mov	r2, sp
 80087f4:	f000 f848 	bl	8008888 <_fstat_r>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	dbec      	blt.n	80087d6 <__swhatbuf_r+0x12>
 80087fc:	9901      	ldr	r1, [sp, #4]
 80087fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008802:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008806:	4259      	negs	r1, r3
 8008808:	4159      	adcs	r1, r3
 800880a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800880e:	e7eb      	b.n	80087e8 <__swhatbuf_r+0x24>

08008810 <__smakebuf_r>:
 8008810:	898b      	ldrh	r3, [r1, #12]
 8008812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008814:	079d      	lsls	r5, r3, #30
 8008816:	4606      	mov	r6, r0
 8008818:	460c      	mov	r4, r1
 800881a:	d507      	bpl.n	800882c <__smakebuf_r+0x1c>
 800881c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	6123      	str	r3, [r4, #16]
 8008824:	2301      	movs	r3, #1
 8008826:	6163      	str	r3, [r4, #20]
 8008828:	b002      	add	sp, #8
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	ab01      	add	r3, sp, #4
 800882e:	466a      	mov	r2, sp
 8008830:	f7ff ffc8 	bl	80087c4 <__swhatbuf_r>
 8008834:	9900      	ldr	r1, [sp, #0]
 8008836:	4605      	mov	r5, r0
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff f8fb 	bl	8007a34 <_malloc_r>
 800883e:	b948      	cbnz	r0, 8008854 <__smakebuf_r+0x44>
 8008840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008844:	059a      	lsls	r2, r3, #22
 8008846:	d4ef      	bmi.n	8008828 <__smakebuf_r+0x18>
 8008848:	f023 0303 	bic.w	r3, r3, #3
 800884c:	f043 0302 	orr.w	r3, r3, #2
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	e7e3      	b.n	800881c <__smakebuf_r+0xc>
 8008854:	89a3      	ldrh	r3, [r4, #12]
 8008856:	6020      	str	r0, [r4, #0]
 8008858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	9b00      	ldr	r3, [sp, #0]
 8008860:	6163      	str	r3, [r4, #20]
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	6120      	str	r0, [r4, #16]
 8008866:	b15b      	cbz	r3, 8008880 <__smakebuf_r+0x70>
 8008868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800886c:	4630      	mov	r0, r6
 800886e:	f000 f81d 	bl	80088ac <_isatty_r>
 8008872:	b128      	cbz	r0, 8008880 <__smakebuf_r+0x70>
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f023 0303 	bic.w	r3, r3, #3
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	431d      	orrs	r5, r3
 8008884:	81a5      	strh	r5, [r4, #12]
 8008886:	e7cf      	b.n	8008828 <__smakebuf_r+0x18>

08008888 <_fstat_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_fstat_r+0x20>)
 800888c:	2300      	movs	r3, #0
 800888e:	4604      	mov	r4, r0
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	f7f8 fdb0 	bl	80013fa <_fstat>
 800889a:	1c43      	adds	r3, r0, #1
 800889c:	d102      	bne.n	80088a4 <_fstat_r+0x1c>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	b103      	cbz	r3, 80088a4 <_fstat_r+0x1c>
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	bf00      	nop
 80088a8:	20000520 	.word	0x20000520

080088ac <_isatty_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d06      	ldr	r5, [pc, #24]	; (80088c8 <_isatty_r+0x1c>)
 80088b0:	2300      	movs	r3, #0
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	f7f8 fdaf 	bl	800141a <_isatty>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_isatty_r+0x1a>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_isatty_r+0x1a>
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	20000520 	.word	0x20000520

080088cc <_init>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	bf00      	nop
 80088d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088d2:	bc08      	pop	{r3}
 80088d4:	469e      	mov	lr, r3
 80088d6:	4770      	bx	lr

080088d8 <_fini>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	bf00      	nop
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr
